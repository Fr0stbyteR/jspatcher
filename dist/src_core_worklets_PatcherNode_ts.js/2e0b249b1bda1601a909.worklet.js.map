{"version":3,"file":"src_core_worklets_PatcherNode_ts.js/2e0b249b1bda1601a909.worklet.js","mappings":"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","sources":["webpack://JSPatcher/./src/core/worklets/Patcher.worklet.ts","webpack://JSPatcher/./src/core/worklets/AudioWorkletProxyNode.ts","webpack://JSPatcher/./src/core/worklets/AudioWorkletRegister.ts","webpack://JSPatcher/./src/core/worklets/PatcherNode.ts"],"sourcesContent":["module.exports = __webpack_public_path__ + \"js/5d877e0ec8230eaa8931.worklet.js\";","import { MessagePortResponse, MessagePortRequest } from \"./TypedAudioWorklet\";\nimport { AudioWorkletProxyNode } from \"./AudioWorkletProxyNode.types\";\n\nconst Node = class AudioWorkletProxyNode extends AudioWorkletNode {\n    static fnNames: string[] = [];\n    _disposed = false;\n    constructor(context: AudioContext, name: string, options?: AudioWorkletNodeOptions) {\n        super(context, name, options);\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = 1;\n        const handleDisposed = () => {\n            this.port.removeEventListener(\"message\", handleMessage);\n            this.port.close();\n        };\n        const handleMessage = async (e: MessageEvent<MessagePortResponse & MessagePortRequest>) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                this.port.postMessage(r);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) rejects[id]?.(error);\n                else if (resolves[id]) resolves[id]?.(value);\n                delete resolves[id];\n                delete rejects[id];\n            }\n        };\n        // eslint-disable-next-line\n        const call = (call: string, ...args: any[]) => {\n            return new Promise<any>((resolve, reject) => {\n                const id = messagePortRequestId++;\n                resolves[id] = resolve;\n                rejects[id] = reject;\n                this.port.postMessage({ id, call, args });\n            });\n        };\n        const Ctor = (this.constructor as typeof AudioWorkletProxyNode);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        this.port.start();\n        this.port.addEventListener(\"message\", handleMessage);\n    }\n} as typeof AudioWorkletProxyNode;\n\nexport default Node;\n","export const registeredProcessors: WeakMap<AudioWorklet, Set<string>> = window.jspatcherEnv?.AudioWorkletRegister?.registeredProcessors || new WeakMap();\nexport const registeringProcessors: WeakMap<AudioWorklet, Set<string>> = window.jspatcherEnv?.AudioWorkletRegister?.registeringProcessors || new WeakMap();\nexport const resolves: Record<string, ((value?: void | PromiseLike<void>) => void)[]> = window.jspatcherEnv?.AudioWorkletRegister?.resolves || {};\nexport const rejects: Record<string, ((reason?: any) => void)[]> = window.jspatcherEnv?.AudioWorkletRegister?.rejects || {};\n\nexport default class AudioWorkletRegister {\n    static registeredProcessors = registeredProcessors;\n\n    static registeringProcessors = registeringProcessors;\n\n    static resolves = resolves;\n\n    static rejects = rejects;\n\n    private static async registerProcessor(audioWorklet: AudioWorklet, processorId: string, processor: string | ((id: string, ...injections: any[]) => void), ...injection: any[]) {\n        this.registeringProcessors.get(audioWorklet).add(processorId);\n        try {\n            const url = typeof processor === \"string\" ? processor : URL.createObjectURL(new Blob([`(${processor.toString()})(${[processorId, ...injection].map(JSON.stringify as (arg: any) => string).join(\", \")});`], { type: \"text/javascript\" }));\n            await audioWorklet.addModule(url);\n            this.resolves[processorId].forEach(f => f());\n            this.registeringProcessors.get(audioWorklet).delete(processorId);\n            this.registeredProcessors.get(audioWorklet).add(processorId);\n        } catch (e) {\n            this.rejects[processorId].forEach(f => f(e));\n        }\n        this.rejects[processorId] = [];\n        this.resolves[processorId] = [];\n    }\n\n    static async register(audioWorklet: AudioWorklet, processorId: string, processor: string | ((id: string, ...injections: any[]) => void), ...injection: any[]) {\n        if (!this.resolves[processorId]) this.resolves[processorId] = [];\n        if (!this.rejects[processorId]) this.rejects[processorId] = [];\n        const promise = new Promise<void>((resolve, reject) => {\n            this.resolves[processorId].push(resolve);\n            this.rejects[processorId].push(reject);\n        });\n        if (!this.registeringProcessors.has(audioWorklet)) {\n            this.registeringProcessors.set(audioWorklet, new Set());\n        }\n        if (!this.registeredProcessors.has(audioWorklet)) {\n            this.registeredProcessors.set(audioWorklet, new Set());\n        }\n        const registered = this.registeredProcessors.get(audioWorklet).has(processorId);\n        const registering = this.registeringProcessors.get(audioWorklet).has(processorId);\n        if (registered) return Promise.resolve();\n        if (registering) return promise;\n        if (!registered && audioWorklet) {\n            this.registerProcessor(audioWorklet, processorId, processor, ...injection);\n        }\n        return promise;\n    }\n}\n","import processorURL from \"./Patcher.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\nimport type Patcher from \"../patcher/Patcher\";\nimport type { PatcherEventMap } from \"../patcher/Patcher\";\nimport type { IPatcherNode, IPatcherProcessor, PatcherOptions, PatcherParameters } from \"./PatcherWorklet.types\";\nimport type { IJSPatcherEnv } from \"../Env\";\n\nconst processorId = \"__JSPatcher_Patcher\";\n\nexport default class PatcherNode extends AudioWorkletProxyNode<IPatcherNode, IPatcherProcessor, PatcherParameters, PatcherOptions> implements IPatcherNode {\n    static processorId = processorId;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorId, processorURL);\n    static fnNames: (keyof IPatcherProcessor)[] = [\"init\", \"fn\", \"sync\", \"objectEmit\", \"destroy\"];\n    readonly patcher: Patcher;\n    constructor(context: BaseAudioContext, options: { env: IJSPatcherEnv; inputs: number; outputs: number } & PatcherOptions) {\n        super(context, processorId, {\n            numberOfInputs: options.inputs,\n            numberOfOutputs: options.outputs,\n            channelCountMode: \"explicit\",\n            channelInterpretation: \"discrete\",\n            processorOptions: { instanceId: options.instanceId, fileId: options.fileId, data: options.data }\n        });\n        this.patcher = options.env.getInstanceById(options.instanceId) as Patcher;\n        this.patcher.on(\"changed\", this.handleChanged);\n        this.patcher.on(\"dataInput\", this.handleInput);\n        this.patcher.on(\"destroy\", this.handleDestroy);\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this._disposed = true;\n        };\n    }\n    handleChanged = () => {\n        const syncData = this.patcher.history.getSyncData();\n        this.sync(syncData);\n    };\n    handleInput = (e: PatcherEventMap[\"dataInput\"]) => this.fn(e.data, e.inlet);\n    handleDestroy = () => this.destroy();\n    outlet(port: number, data: any) {\n        this.patcher.outlet(port, data);\n    }\n    objectEmitFromWorklet(boxId: string, eventName: string, eventData: any) {\n        return this.patcher.boxes[boxId]?.object.emit(eventName as any, eventData);\n    }\n}\n"],"names":["_a","call","e","name"],"sourceRoot":""}