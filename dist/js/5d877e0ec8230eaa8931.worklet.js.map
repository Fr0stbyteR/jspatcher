{"version":3,"file":"js/5d877e0ec8230eaa8931.worklet.js","mappings":"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","sources":["webpack://JSPatcher/./src/core/worklets/AudioWorkletProxyProcessor.ts","webpack://JSPatcher/webpack/bootstrap","webpack://JSPatcher/webpack/runtime/define property getters","webpack://JSPatcher/webpack/runtime/hasOwnProperty shorthand","webpack://JSPatcher/webpack/runtime/make namespace object","webpack://JSPatcher/./src/core/worklets/Patcher.worklet.ts"],"sourcesContent":["import { AudioWorkletGlobalScope, MessagePortRequest, MessagePortResponse } from \"./TypedAudioWorklet\";\nimport { AudioWorkletProxyProcessor } from \"./AudioWorkletProxyProcessor.types\";\n\ndeclare const globalThis: AudioWorkletGlobalScope;\nconst { AudioWorkletProcessor } = globalThis;\n\nconst Processor = class AudioWorkletProxyProcessor extends AudioWorkletProcessor {\n    static fnNames: string[] = [];\n    _disposed = false;\n    constructor(options: AudioWorkletNodeOptions) {\n        super(options);\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = -1;\n        const handleDisposed = () => {\n            this.port.removeEventListener(\"message\", handleMessage);\n            this.port.close();\n        };\n        const handleMessage = async (e: MessageEvent<MessagePortResponse & MessagePortRequest>) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                this.port.postMessage(r as any);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) rejects[id]?.(error);\n                else if (resolves[id]) resolves[id]?.(value);\n                delete resolves[id];\n                delete rejects[id];\n            }\n        };\n        const call = (call: string, ...args: any[]) => new Promise<any>((resolve, reject) => {\n            const id = messagePortRequestId--;\n            resolves[id] = resolve;\n            rejects[id] = reject;\n            this.port.postMessage({ id, call, args });\n        });\n        const Ctor = (this.constructor as typeof AudioWorkletProxyProcessor);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        this.port.start();\n        this.port.addEventListener(\"message\", handleMessage);\n    }\n} as typeof AudioWorkletProxyProcessor;\n\nexport default Processor;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import AudioWorkletProxyProcessor from \"./AudioWorkletProxyProcessor\";\nimport type PatcherEditor from \"../patcher/PatcherEditor\";\nimport type Patcher from \"../patcher/Patcher\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type { IPatcherNode, PatcherParameters, IPatcherProcessor, PatcherOptions } from \"./PatcherWorklet.types\";\nimport type { AudioWorkletGlobalScope, TypedAudioParamDescriptor, TypedAudioWorkletNodeOptions } from \"./TypedAudioWorklet\";\nimport type { IHistoryData } from \"../file/History\";\nimport type { PatcherEditorEventMap } from \"../patcher/PatcherEditor\";\nimport type { PatcherEventMap } from \"../patcher/Patcher\";\nimport type { RawPatcher } from \"../types\";\n\nconst processorId = \"__JSPatcher_Patcher\";\ndeclare const globalThis: AudioWorkletGlobalScope;\nconst { registerProcessor, jspatcherEnv } = globalThis;\n\nexport default class PatcherProcessor extends AudioWorkletProxyProcessor<IPatcherProcessor, IPatcherNode, PatcherParameters, PatcherOptions> implements IPatcherProcessor {\n    static fnNames: (keyof IPatcherNode)[] = [\"outlet\", \"objectEmitFromWorklet\"];\n    static get parameterDescriptors(): TypedAudioParamDescriptor<PatcherParameters>[] {\n        return new Array(128).fill(null).map((v, i) => ({\n            defaultValue: 0,\n            // maxValue: Number.MAX_VALUE,\n            // minValue: -Number.MAX_VALUE,\n            name: `00${i}`.slice(-3)\n        }));\n    }\n    readonly env = jspatcherEnv;\n    readonly instanceId: string;\n    readonly file: PersistentProjectFile;\n    readonly initData: RawPatcher;\n    patcher: Patcher;\n    editor: PatcherEditor;\n    constructor(options?: TypedAudioWorkletNodeOptions<PatcherOptions>) {\n        super(options);\n        const { instanceId, fileId, data } = options.processorOptions;\n        this.instanceId = instanceId;\n        this.file = this.env.fileMgr.getProjectItemFromId(fileId) as PersistentProjectFile;\n        this.initData = data;\n    }\n    async init() {\n        const Patcher = this.env.sdk.Patcher;\n        this.patcher = new Patcher({ env: this.env, file: this.file, project: this.env.currentProject, instanceId: this.instanceId });\n        this.patcher.state.patcherProcessor = this;\n        await this.patcher.init(this.initData);\n        this.patcher.on(\"dataOutput\", this.handleOutlet);\n        this.editor = await this.patcher.getEditor();\n    }\n    handleOutlet = (e: PatcherEventMap[\"dataOutput\"]) => this.outlet(e.outlet, e.data);\n    fn(data: any, port: number) {\n        this.patcher.fn(data, port);\n    }\n    sync(data: /* IHistoryData<PatcherEditorEventMap> */any) {\n        // this.patcher.history.syncData(data);\n    }\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<PatcherParameters, Float32Array>) {\n        if (this._disposed) return false;\n        if (!inputs?.[0]?.[0]?.length) return true;\n        const { parametersBoxes } = this.patcher.inspectAudioIO();\n        const handleOutput = ({ output, buffer }: PatcherEventMap[\"audioOutput\"]) => {\n            if (outputs[output]?.[0]) outputs[output][0].set(buffer);\n        };\n        this.patcher.on(\"audioOutput\", handleOutput);\n        for (let i = 0; i < inputs.length; i++) {\n            if (inputs[i]?.[0]) this.patcher.inputAudio(i, inputs[i][0]);\n        }\n        for (const key in parameters) {\n            const boxInfo = parametersBoxes[+key];\n            if (!boxInfo) continue;\n            const param = boxInfo[0];\n            this.patcher.inputParam(param, parameters[param]);\n        }\n        this.patcher.off(\"audioOutput\", handleOutput);\n        return true;\n    }\n    destroy() {\n        this.patcher.destroy();\n        this._disposed = true;\n    }\n    objectEmit(boxId: string, eventName: string, eventData: any) {\n        return this.patcher.boxes[boxId]?.object.emit(eventName as any, eventData);\n    }\n}\n\ntry {\n    registerProcessor(processorId, PatcherProcessor);\n} catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn(error);\n}\n"],"names":["_a","call","e"],"sourceRoot":""}