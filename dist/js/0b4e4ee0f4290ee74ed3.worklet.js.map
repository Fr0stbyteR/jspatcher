{"version":3,"file":"js/0b4e4ee0f4290ee74ed3.worklet.js","mappings":"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","sources":["webpack://JSPatcher/./src/core/worklets/AudioWorkletProxyProcessor.ts","webpack://JSPatcher/./src/utils/buffer.ts","webpack://JSPatcher/./src/utils/math.ts","webpack://JSPatcher/./src/utils/utils.ts","webpack://JSPatcher/./node_modules/window-function/apply.js","webpack://JSPatcher/./node_modules/window-function/bartlett-hann.js","webpack://JSPatcher/./node_modules/window-function/bartlett.js","webpack://JSPatcher/./node_modules/window-function/blackman-harris.js","webpack://JSPatcher/./node_modules/window-function/blackman-nuttall.js","webpack://JSPatcher/./node_modules/window-function/blackman.js","webpack://JSPatcher/./node_modules/window-function/cosine.js","webpack://JSPatcher/./node_modules/window-function/exact-blackman.js","webpack://JSPatcher/./node_modules/window-function/flat-top.js","webpack://JSPatcher/./node_modules/window-function/gaussian.js","webpack://JSPatcher/./node_modules/window-function/hamming.js","webpack://JSPatcher/./node_modules/window-function/hann.js","webpack://JSPatcher/./node_modules/window-function/index.js","webpack://JSPatcher/./node_modules/window-function/lanczos.js","webpack://JSPatcher/./node_modules/window-function/nuttall.js","webpack://JSPatcher/./node_modules/window-function/rectangular.js","webpack://JSPatcher/./node_modules/window-function/triangular.js","webpack://JSPatcher/./node_modules/window-function/tukey.js","webpack://JSPatcher/./node_modules/window-function/welch.js","webpack://JSPatcher/webpack/bootstrap","webpack://JSPatcher/webpack/runtime/compat get default export","webpack://JSPatcher/webpack/runtime/define property getters","webpack://JSPatcher/webpack/runtime/hasOwnProperty shorthand","webpack://JSPatcher/webpack/runtime/make namespace object","webpack://JSPatcher/./src/core/worklets/FaustFFTProcessor.worklet.ts"],"sourcesContent":["import { AudioWorkletGlobalScope, MessagePortRequest, MessagePortResponse } from \"./TypedAudioWorklet\";\nimport { AudioWorkletProxyProcessor } from \"./AudioWorkletProxyProcessor.types\";\n\ndeclare const globalThis: AudioWorkletGlobalScope;\nconst { AudioWorkletProcessor } = globalThis;\n\nconst Processor = class AudioWorkletProxyProcessor extends AudioWorkletProcessor {\n    static fnNames: string[] = [];\n    _disposed = false;\n    constructor(options: AudioWorkletNodeOptions) {\n        super(options);\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = -1;\n        const handleDisposed = () => {\n            this.port.removeEventListener(\"message\", handleMessage);\n            this.port.close();\n        };\n        const handleMessage = async (e: MessageEvent<MessagePortResponse & MessagePortRequest>) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                this.port.postMessage(r as any);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) rejects[id]?.(error);\n                else if (resolves[id]) resolves[id]?.(value);\n                delete resolves[id];\n                delete rejects[id];\n            }\n        };\n        const call = (call: string, ...args: any[]) => new Promise<any>((resolve, reject) => {\n            const id = messagePortRequestId--;\n            resolves[id] = resolve;\n            rejects[id] = reject;\n            this.port.postMessage({ id, call, args });\n        });\n        const Ctor = (this.constructor as typeof AudioWorkletProxyProcessor);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        this.port.start();\n        this.port.addEventListener(\"message\", handleMessage);\n    }\n} as typeof AudioWorkletProxyProcessor;\n\nexport default Processor;\n","import { mod } from \"./math\";\n\ntype TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array;\ntype TypedArrayConstructor = typeof Int8Array | typeof Uint8Array | typeof Int16Array | typeof Uint16Array | typeof Int32Array | typeof Uint32Array | typeof Uint8ClampedArray | typeof Float32Array | typeof Float64Array;\nexport const sum = (array: TypedArray | number[], from = 0, length = array.length) => {\n    let sum = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sum += array[(from + i) % l];\n    }\n    return sum;\n};\nexport const mean = (array: TypedArray | number[], from = 0, length = array.length) => sum(array, from, length) / length;\nexport const median = (array: TypedArray | number[], from = 0, length = array.length) => {\n    if (length === 0) throw new Error(\"trying to calculate median of empty array\");\n    const sortedArray = (from + length > array.length ? Array.isArray(array) ? array.slice(from).concat(array.slice(0, from + length - array.length)) : sliceBuffer(array, length, from) : array.slice(from, from + length)).sort();\n    if (length % 2 === 0) return (sortedArray[length / 2 - 1] + sortedArray[length / 2]) / 2;\n    return sortedArray[~~(length / 2)];\n};\nexport const maxIndex = (array: TypedArray | number[], from = 0, length = array.length) => {\n    const l = array.length;\n    if (!l) return 0;\n    let index = 0;\n    let max = array[0];\n    let i = length;\n    while (i-- > 1) {\n        const cur = array[(from + i) % l];\n        if (cur <= max) continue;\n        max = cur;\n        index = i;\n    }\n    return index;\n};\nexport const energy = (signal: TypedArray | number[], from = 0, length = signal.length) => {\n    let sum = 0;\n    let sample = 0;\n    const l = signal.length;\n    for (let i = 0; i < length; i++) {\n        sample = signal[(from + i) % l];\n        sum += sample * sample;\n    }\n    return sum;\n};\nexport const rms = (signal: TypedArray | number[], from = 0, length = signal.length) => Math.sqrt(energy(signal, from, length) / signal.length);\nexport const absMax = (signal: TypedArray | number[], from = 0, length = signal.length) => {\n    let max = 0;\n    let sample = 0;\n    const l = signal.length;\n    for (let i = 0; i < length; i++) {\n        sample = Math.abs(signal[(from + i) % l]);\n        if (sample > max) max = sample;\n    }\n    return max;\n};\nexport const zcr = (signal: TypedArray | number[], from = 0, length = signal.length) => {\n    let zcr = 0;\n    let lastPositive = true;\n    let positive = true;\n    const l = signal.length;\n    for (let i = 0; i < length; i++) {\n        positive = signal[(from + i) % l] >= 0;\n        if (positive !== lastPositive) zcr++;\n        lastPositive = positive;\n    }\n    return zcr;\n};\nexport const centroid = (array: TypedArray | number[], from = 0, length = array.length) => {\n    let weightedSum = 0;\n    let weight = 0;\n    let sample = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sample = array[(from + i) % l];\n        weightedSum += i * Math.abs(sample);\n        weight += sample;\n    }\n    return weight === 0 ? 0 : weightedSum / weight;\n};\nexport const conjugatedCentroid = (array: TypedArray | number[], factor: number, from = 0, length = array.length) => {\n    let weightedSum = 0;\n    let weight = 0;\n    let sample = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sample = array[(from + i) % l];\n        weightedSum += (i ** factor) * Math.abs(sample);\n        weight += sample;\n    }\n    return weight === 0 ? 0 : weightedSum / weight;\n};\nexport const geometricMean = (array: TypedArray | number[], from = 0, length = array.length) => {\n    let sum = 0;\n    let sample = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sample = array[(from + i) % l];\n        if (sample <= 0) return 0;\n        sum += Math.log(sample);\n    }\n    return Math.exp(sum / length);\n};\nexport const flatness = (array: TypedArray | number[], from = 0, length = array.length) => geometricMean(array, from, length) / mean(array, from, length);\n/**\n * https://essentia.upf.edu/reference/std_Flux.html\n */\nexport const flux = (cur: TypedArray | number[], prev: TypedArray | number[], norm?: \"L1\" | \"L2\", halfRectify?: boolean) => {\n    let flux = 0;\n    if (norm === \"L2\") {\n        if (halfRectify === true) { // L2 + halfRectify\n            for (let i = 0; i < cur.length; i++) {\n                const diff = cur[i] - prev[i];\n                if (diff < 0) continue;\n                flux += diff * diff;\n            }\n            return Math.sqrt(flux);\n        }\n        for (let i = 0; i < cur.length; i++) { // L2 not halfRectify\n            const diff = cur[i] - prev[i];\n            flux += diff * diff;\n        }\n        return Math.sqrt(flux);\n    }\n    if (halfRectify === true) { // L1 + halfRectify\n        for (let i = 0; i < cur.length; i++) {\n            const diff = cur[i] - prev[i];\n            if (diff < 0) continue;\n            flux += diff;\n        }\n        return flux;\n    }\n    for (let i = 0; i < cur.length; i++) { // L1 not halfRectify\n        const diff = cur[i] - prev[i];\n        flux += Math.abs(diff);\n    }\n    return flux;\n};\n/**\n * https://github.com/meyda/meyda/blob/master/src/extractors/spectralKurtosis.js=\n */\nexport const kurtosis = (array: TypedArray | number[], from = 0, length = array.length) => {\n    const c1 = centroid(array, from, length);\n    const c2 = conjugatedCentroid(array, 2, from, length);\n    const c3 = conjugatedCentroid(array, 3, from, length);\n    const c4 = conjugatedCentroid(array, 4, from, length);\n    const numerator = -3 * c1 ** 4 + 6 * c1 * c2 - 4 * c1 * c3 + c4;\n    const denominator = (c2 - c1 ** 2) ** 2;\n    return numerator / denominator;\n};\n/**\n * https://github.com/meyda/meyda/blob/master/src/extractors/spectralSkewness.js\n */\nexport const skewness = (array: TypedArray | number[], from = 0, length = array.length) => {\n    const c1 = centroid(array, from, length);\n    const c2 = conjugatedCentroid(array, 2, from, length);\n    const c3 = conjugatedCentroid(array, 3, from, length);\n    const numerator = 2 * c1 ** 3 - 3 * c1 * c2 + c3;\n    const denominator = (c2 - c1 ** 2) ** 1.5;\n    return numerator / denominator;\n};\n/**\n * https://essentia.upf.edu/reference/std_RollOff.html\n *\n * @param {TypedArray} array\n * @param {number} [cutoff] Between 0 - 1\n * @returns\n */\nexport const rolloff = (array: TypedArray | number[], from = 0, length = array.length, cutoff?: number) => {\n    let e = energy(array, from, length);\n    const threshold = (cutoff || 0.99) * e;\n    let n = length - 1;\n    let element;\n    while (e > threshold && n >= 0) {\n        element = array[(n + from) % length];\n        e -= element * element;\n        --n;\n    }\n    return n + 1;\n};\nexport const slope = (array: TypedArray | number[], from = 0, n = array.length) => {\n    const xSum = n * n / 2;\n    const x2Sum = (n - 1) * n * (2 * n - 1) / 6;\n    let ySum = 0;\n    let xySum = 0;\n    let y;\n    for (let x = 0; x < n; x++) {\n        y = array[(x + from) % n];\n        ySum += y;\n        xySum += x * y;\n    }\n    return (n * xySum - xSum * ySum) / (n * x2Sum - xSum * xSum);\n};\nexport const spread = (array: TypedArray | number[], from = 0, length = array.length) => Math.sqrt(conjugatedCentroid(array, 2, from, length)) - centroid(array, from, length) ** 2;\n/**\n * Copy buffer to another, support negative offset index\n */\nexport const setTypedArray = <T extends TypedArray = TypedArray>(to: T, from: T, offsetTo?: number, offsetFrom?: number) => {\n    const toLength = to.length;\n    const fromLength = from.length;\n    const spillLength = Math.min(toLength, fromLength);\n    let spilled = 0;\n    let $to = mod(offsetTo, toLength) || 0;\n    let $from = mod(offsetFrom, fromLength) || 0;\n    while (spilled < spillLength) {\n        const $spillLength = Math.min(spillLength - spilled, toLength - $to, fromLength - $from);\n        const $fromEnd = $from + $spillLength;\n        if ($from === 0 && $fromEnd === fromLength) to.set(from, $to);\n        else to.set(from.subarray($from, $fromEnd), $to);\n        $to = ($to + $spillLength) % toLength;\n        $from = $fromEnd % fromLength;\n        spilled += $spillLength;\n    }\n    return $to;\n};\n\nexport const getSubTypedArray = <T extends TypedArray = TypedArray>(from: T, length: number, offset = 0) => {\n    const fromLength = from.length;\n    const $ = mod(offset, fromLength) || 0;\n    if ($ === 0 && length === fromLength) return from;\n    if ($ + length < fromLength) return from.subarray($, $ + length) as T;\n    const to = new (from.constructor as TypedArrayConstructor)(length) as T;\n    setTypedArray(to, from, 0, $);\n    return to;\n};\n\nexport const sliceBuffer = <T extends TypedArray = TypedArray>(from: T, length: number, offset?: number) => {\n    const fromLength = from.length;\n    const $ = mod(offset, fromLength) || 0;\n    if ($ === 0 && length === fromLength) return from.slice();\n    if ($ + length < fromLength) return from.slice($, $ + length) as T;\n    const to = new (from.constructor as TypedArrayConstructor)(length) as T;\n    setTypedArray(to, from, 0, $);\n    return to;\n};\n/**\n * http://www.fftw.org/fftw3_doc/The-Halfcomplex_002dformat-DFT.html\n */\nexport const fftw2Amp = (from: Float32Array, windowEnergyFactor: number) => {\n    const { length } = from;\n    const amps = new Float32Array(length / 2);\n    for (let i = 0; i < length / 2; i++) {\n        const real = from[i];\n        const imag = (i === 0 || i === length / 2 - 1) ? 0 : from[length - i];\n        amps[i] = (real * real + imag * imag) ** 0.5 / length * windowEnergyFactor;\n    }\n    return amps;\n};\nexport const estimateFreq = (amps: Float32Array, sampleRate: number) => indexToFreq(maxIndex(amps), amps.length, sampleRate);\nexport const indexToFreq = (i: number, fftBins: number, sampleRate: number) => (i % fftBins) / fftBins * sampleRate / 2;\n","import { isNumberArray } from \"./utils\";\n\n/**\n * Mod support wrapping with negative numbers\n */\nexport const mod = (x: number, y: number): number => (x % y + y) % y;\n/**\n * Round a number to multiple of another\n */\nexport const round = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.round(x * (1 / to)) / (1 / to) : Math.round(x / to) * to);\n/**\n * Floor a number to multiple of another\n */\nexport const floor = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.floor(x * (1 / to)) / (1 / to) : Math.floor(x / to) * to);\n/**\n * Ceil a number to multiple of another\n */\nexport const ceil = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.ceil(x * (1 / to)) / (1 / to) : Math.ceil(x / to) * to);\n/**\n * Degree to radian\n */\nexport const toRad = (degrees: number): number => degrees * Math.PI / 180;\n/**\n * MIDI note number to string\n */\nexport const toMIDI = (f: number): string => [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"][(f % 12 + 12) % 12] + Math.round(f / 12 - 2);\n/**\n * Linear amplitude ([0, 1]) to dB ([-Inf, 0])\n *\n * @param {number} a linear amplitude value\n * @returns {number} dB value\n */\nexport const atodb = (a: number): number => 20 * Math.log10(a);\n/**\n * dB ([-Inf, 0]) to Linear mplitude ([0, 1])\n *\n * @param {number} db dB value\n * @returns {number} linear amplitude value\n */\nexport const dbtoa = (db: number): number => 10 ** (db / 20);\n/**\n * De-scale a exponently scaled value\n *\n * @param {number} x normalized value to scale between ([0, 1])\n * @param {number} e exponent factor used to scale, 0 means linear, 1 does ** 1.5 curve\n * @returns {number} de-scaled value\n */\nexport const iNormExp = (x: number, e: number): number => Math.max(0, x) ** (1.5 ** -e);\n/**\n * Scale exponently a normalized value\n *\n * @param {number} x normalized value to scale between ([0, 1])\n * @param {number} e exponent factor, 0 means linear, 1 does ** 1.5 curve\n * @returns {number} scaled value\n */\nexport const normExp = (x: number, e: number): number => Math.max(0, x) ** (1.5 ** e);\n\nexport const scale = (x: number, l1: number, h1: number, l2: number, h2: number) => {\n    const r1 = h1 - l1;\n    const r2 = h2 - l2;\n    return (x - l1) / r1 * r2 + l2;\n};\n\nexport const scaleClip = (x: number, l1: number, h1: number, l2: number, h2: number) => Math.max(l2, Math.min(h2, scale(x, l1, h1, l2, h2)));\n\n// eslint-disable-next-line arrow-body-style\nexport const isIdentityMatrix = (x: number[][]) => {\n    return Array.isArray(x)\n    && x.every((row, i) => isNumberArray(row)\n    && row.length === x.length\n    && row.every((e, j) => e === (j === i ? 1 : 0)));\n};\n\nexport const identityMatrix = (dim: number) => new Array(dim).fill(undefined).map((x, i) => new Array(dim).fill(undefined).map((y, j) => +(i === j)));\n","/* eslint-disable arrow-body-style */\nimport type { TPatcherProps } from \"../core/patcher/Patcher\";\nimport type { TMIDIEvent, TBPF, TRect, TPresentationRect, ProjectItemType, RawPatcher, TMaxPatcher, TAudioUnit, TypedArray } from \"../core/types\";\n\nexport const uuid = () => {\n    return globalThis?.crypto?.randomUUID\n        ? crypto.randomUUID()\n        : \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            const r = Math.random() * 16 | 0;\n            const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n};\n\nexport const getTimestamp = () => {\n    if (globalThis.performance) {\n        return performance.now() + (performance.timeOrigin || performance.timing.navigationStart);\n    }\n    return Date.now();\n};\n\nexport const isStringArray = (x: any): x is string[] => Array.isArray(x) && x.every(e => typeof e === \"string\");\nexport const isNumberArray = (x: any): x is number[] => Array.isArray(x) && x.every(e => typeof e === \"number\");\n\nexport const isTypedArray = (x: any): x is TypedArray => {\n    return typeof x === \"object\" && (\n        x instanceof Int8Array\n        || x instanceof Int16Array\n        || x instanceof Int32Array\n        || x instanceof Uint8Array\n        || x instanceof Uint8ClampedArray\n        || x instanceof Uint16Array\n        || x instanceof Uint32Array\n        || x instanceof Float32Array\n        || x instanceof Float64Array\n        || x instanceof BigInt64Array\n        || x instanceof BigUint64Array\n    );\n};\nexport const isTRect = (x: any): x is TRect => {\n    return isNumberArray(x)\n        && x.length === 4\n        && x[0] >= 0\n        && x[1] >= 0\n        && x[2] >= 15\n        && x[3] >= 15;\n};\nexport const isTPresentationRect = (x: any): x is TPresentationRect => {\n    return Array.isArray(x)\n        && x.length === 4\n        && x.every(v => typeof v === \"number\" || typeof v === \"string\");\n};\nexport const isRectMovable = (x: any): x is [number, number, number | string, number | string] => {\n    return isTPresentationRect(x) && typeof x[0] === \"number\" && typeof x[1] === \"number\";\n};\nexport const isRectResizable = (x: any): x is TRect => isTRect(x);\nexport const isMIDIEvent = (x: any): x is TMIDIEvent => (isNumberArray(x) || x instanceof Uint8Array) && x.length === 3;\nexport const stringifyError = (data: any) => {\n    if (typeof data === \"string\") return data;\n    if (data instanceof Error) return data.message;\n    if (typeof data === \"object\") return JSON.stringify(data);\n    return `${data}`;\n};\nexport const parseToPrimitive = (value: any) => {\n    try {\n        return JSON.parse(value);\n    } catch (e) {\n        return value.toString();\n    }\n};\nexport const rgbaMax2Css = (maxColor: number[]) => {\n    const cssColor = [255, 255, 255, 1] as TRect;\n    if (Array.isArray(maxColor)) {\n        for (let i = 0; i < 3; i++) {\n            if (typeof maxColor[i] === \"number\") cssColor[i] = Math.floor(maxColor[i] * 255);\n        }\n        if (typeof maxColor[3] === \"number\") cssColor[3] = maxColor[3];\n    }\n    return `rgba(${cssColor.join(\",\")})`;\n};\nexport const css2RgbaMax = (color: string) => {\n    const maxColor = [0.2, 0.2, 0.2, 1] as TRect;\n    const matched = color.match(/rgba\\((.+)\\)/);\n    if (!matched) return maxColor;\n    const cssColor = matched[1].split(\",\").map(s => +s);\n    for (let i = 0; i < 3; i++) {\n        if (typeof cssColor[i] === \"number\") maxColor[i] = cssColor[i] / 255;\n        if (typeof cssColor[3] === \"number\") maxColor[3] = cssColor[3];\n    }\n    return maxColor;\n};\nexport const chunkArray = (array: any[], perChunk: number) => {\n    return array.reduce((acc, cur, idx) => {\n        const i = ~~(idx / perChunk);\n        acc[i] = [...acc[i] || [], cur];\n        return acc;\n    }, [] as any[][]);\n};\n/**\n * A BPF can be described as a succesion of three number tuples.\n * i.e. `1 1 0.5 2 1 1` curve mode means go to 0 immediately then go to 1 in 1s with a curve of e^0.5, then go to 2 in 1s linear.\n * The function transform the string to number[][], i.e. `[[1, 1, 0.5], [2, 1, 1]]`\n *\n * @param {TBPF} sIn\n * @returns {number[][]}\n */\nexport const decodeBPF = (sIn: TBPF, tupleLength: number): number[][] => {\n    if (typeof sIn === \"number\") return [[sIn]];\n    if (isNumberArray(sIn)) return chunkArray(sIn, tupleLength);\n    if (Array.isArray(sIn) && sIn.every(a => isNumberArray(a))) return sIn;\n    if (typeof sIn !== \"string\") throw new Error(\"Failed to decode curve.\");\n    const numbers = sIn.split(\" \").filter(s => !!s).map(s => +s);\n    if (numbers.find(v => !isFinite(v))) throw new Error(\"BPF contains invalid number.\");\n    return chunkArray(numbers, tupleLength);\n};\nexport const decodeCurve = (sIn: TBPF) => decodeBPF(sIn, 3);\nexport const decodeLine = (sIn: TBPF) => decodeBPF(sIn, 2);\n\n/**\n * Gives OS name as follows:\n * \"Windows\"    for all versions of Windows,\n * \"MacOS\"      for all versions of Macintosh OS,\n * \"Linux\"      for all versions of Linux,\n * \"UNIX\"       for all other UNIX flavors,\n * \"Unknown\" indicates failure to detect the OS\n *\n * @returns {\"Windows\" | \"MacOS\" | \"UNIX\" | \"Linux\" | \"Unknown\"} OS name\n */\nexport const detectOS = (): \"Windows\" | \"MacOS\" | \"UNIX\" | \"Linux\" | \"Unknown\" => {\n    const { appVersion } = navigator;\n    if (appVersion.indexOf(\"Win\") !== -1) return \"Windows\";\n    if (appVersion.indexOf(\"Mac\") !== -1) return \"MacOS\";\n    if (appVersion.indexOf(\"X11\") !== -1) return \"UNIX\";\n    if (appVersion.indexOf(\"Linux\") !== -1) return \"Linux\";\n    return \"Unknown\";\n};\nexport const detectBrowserCore = () => {\n    if ((window as any).chrome) return \"Chromium\";\n    if ((window as any).InstallTrigger) return \"Gecko\";\n    if (navigator.vendor.indexOf(\"Apple\") !== -1) return \"WebKit\";\n    return \"Unknown\";\n};\nexport const roundedRect = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number | number[]) => {\n    const radii = [0, 0, 0, 0];\n    if (typeof radius === \"number\") radii.fill(radius);\n    else radius.forEach((v, i) => radii[i] = v);\n    ctx.beginPath();\n    ctx.moveTo(x + radii[0], y);\n    ctx.lineTo(x + width - radii[1], y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radii[1]);\n    ctx.lineTo(x + width, y + height - radii[2]);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radii[2], y + height);\n    ctx.lineTo(x + radii[3], y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radii[3]);\n    ctx.lineTo(x, y + radii[0]);\n    ctx.quadraticCurveTo(x, y, x + radii[0], y);\n    ctx.closePath();\n    ctx.stroke();\n};\nexport const fillRoundedRect = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number | number[]) => {\n    const radii = [0, 0, 0, 0];\n    if (typeof radius === \"number\") radii.fill(radius);\n    else radius.forEach((v, i) => radii[i] = v);\n    ctx.beginPath();\n    ctx.moveTo(x + radii[0], y);\n    ctx.lineTo(x + width - radii[1], y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radii[1]);\n    ctx.lineTo(x + width, y + height - radii[2]);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radii[2], y + height);\n    ctx.lineTo(x + radii[3], y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radii[3]);\n    ctx.lineTo(x, y + radii[0]);\n    ctx.quadraticCurveTo(x, y, x + radii[0], y);\n    ctx.closePath();\n    ctx.fill();\n};\nexport const selectElementRange = (e: HTMLElement) => {\n    const elementIsEditable = (e: HTMLElement): e is HTMLInputElement | HTMLTextAreaElement => !!e.nodeName.match(/^(INPUT|TEXTAREA)$/i);\n    const selection = window.getSelection();\n    if (elementIsEditable(e)) {\n        e.focus();\n        e.select();\n        return;\n    }\n    if (selection.setBaseAndExtent) {\n        // Safari\n        selection.setBaseAndExtent(e, 0, e, e.hasChildNodes() ? 1 : 0);\n        return;\n    }\n    if (selection.addRange && selection.removeAllRanges && document.createRange) {\n        // Mozilla or Opera 10.5+\n        const range = document.createRange();\n        range.selectNodeContents(e);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    }\n};\nexport const selectElementPos = (e: HTMLElement, pos: number) => {\n    const range = document.createRange();\n    const selection = window.getSelection();\n    range.setStart(e.childNodes[0], pos);\n    range.collapse(true);\n    selection.removeAllRanges();\n    selection.addRange(range);\n};\nexport const findFromAscendants = (e: HTMLElement, predict: (e: HTMLElement) => boolean) => {\n    const ascendants = [];\n    let parent = e.parentElement;\n    while (parent !== document.body) {\n        ascendants.push(parent);\n        parent = parent.parentElement;\n    }\n    return ascendants.find(predict);\n};\n// eslint-disable-next-line arrow-body-style\nexport const getPropertyDescriptor = (obj: Record<string, any>, key: string): PropertyDescriptor => {\n    return Object.getOwnPropertyDescriptor(obj, key) || getPropertyDescriptor(Object.getPrototypeOf(obj), key);\n};\nexport const getPropertyDescriptors = (obj: Function | Record<string, any>): PropertyDescriptorMap => {\n    if (typeof obj === \"function\") return Object.getOwnPropertyDescriptors(obj);\n    const proto = Object.getPrototypeOf(obj);\n    if (obj !== Object.prototype && proto === Object.prototype) return Object.getOwnPropertyDescriptors(obj);\n    return Object.assign(proto ? getPropertyDescriptors(proto) : {}, Object.getOwnPropertyDescriptors(obj));\n};\n\nexport const extToType = (ext: string): Exclude<ProjectItemType, \"folder\"> => {\n    if ([\"jspat\", \"maxpat\", \"gendsp\", \"dsppat\"].indexOf(ext) !== -1) return \"patcher\";\n    if ([\"wav\", \"aif\", \"aiff\", \"mp3\", \"aac\", \"flac\", \"ogg\", \"m4a\"].indexOf(ext) !== -1) return \"audio\";\n    if ([\"txt\", \"json\"].indexOf(ext) !== -1) return \"text\";\n    if ([\"apng\", \"avif\", \"gif\", \"jpg\", \"jpeg\", \"jfif\", \"pjpeg\", \"pjp\", \"png\", \"svg\", \"webp\", \"bmp\", \"ico\", \"cur\", \"tif\", \"tiff\"].indexOf(ext) !== -1) return \"image\";\n    if ([\"mp4\", \"webm\", \"3gp\"].indexOf(ext) !== -1) return \"video\";\n    return \"unknown\";\n};\n\nexport const max2js = (patcherIn: TMaxPatcher, mode = \"max\" as TPatcherProps[\"mode\"]): RawPatcher => {\n    const patcher: RawPatcher = { boxes: {}, lines: {} };\n    const maxPatcher = (patcherIn as TMaxPatcher).patcher;\n    patcher.props = {\n        bgColor: rgbaMax2Css(maxPatcher.bgcolor),\n        editingBgColor: rgbaMax2Css(maxPatcher.editing_bgcolor),\n        dependencies: [],\n        grid: maxPatcher.gridsize,\n        openInPresentation: !!maxPatcher.openinpresentation,\n        mode\n    };\n    const maxBoxes = maxPatcher.boxes;\n    const maxLines = maxPatcher.lines;\n    for (let i = 0; i < maxBoxes.length; i++) {\n        const maxBox = maxBoxes[i].box;\n        const numID = parseInt(maxBox.id.match(/\\d+/)[0]);\n        const id = \"box-\" + numID;\n        patcher.boxes[id] = {\n            id,\n            inlets: maxBox.numinlets,\n            outlets: maxBox.numoutlets,\n            rect: maxBox.patching_rect,\n            presentationRect: maxBox.presentation_rect,\n            background: !!maxBox.background,\n            presentation: !!maxBox.presentation,\n            text: (maxBox.maxclass === \"newobj\" ? \"\" : maxBox.maxclass + \" \") + (maxBox.text ? maxBox.text : \"\")\n        };\n    }\n    for (let i = 0; i < maxLines.length; i++) {\n        const lineArgs = maxLines[i].patchline;\n        const id = \"line-\" + i;\n        patcher.lines[id] = {\n            id,\n            src: [lineArgs.source[0].replace(/obj/, \"box\"), lineArgs.source[1]],\n            dest: [lineArgs.destination[0].replace(/obj/, \"box\"), lineArgs.destination[1]]\n        };\n    }\n    return patcher;\n};\n\nexport const js2max = (patcherIn: RawPatcher): TMaxPatcher => {\n    const maxPatcher: TMaxPatcher[\"patcher\"] = {\n        boxes: [],\n        lines: [],\n        rect: undefined,\n        bgcolor: css2RgbaMax(patcherIn.props.bgColor),\n        editing_bgcolor: css2RgbaMax(patcherIn.props.editingBgColor),\n        gridsize: patcherIn.props.grid,\n        openinpresentation: +patcherIn.props.openInPresentation\n    };\n    for (const id in patcherIn.boxes) {\n        const box = patcherIn.boxes[id];\n        const numID = parseInt(id.match(/\\d+/)[0]);\n        maxPatcher.boxes.push({\n            box: {\n                id: `obj-${numID}`,\n                maxclass: \"newobj\",\n                numinlets: box.inlets,\n                numoutlets: box.outlets,\n                patching_rect: box.rect,\n                presentation: +box.presentation,\n                background: +box.background,\n                text: box.text\n            }\n        });\n    }\n    for (const id in patcherIn.lines) {\n        const line = patcherIn.lines[id];\n        maxPatcher.lines.push({\n            patchline: {\n                source: [line.src[0].replace(/box/, \"obj\"), line.src[1]],\n                destination: [line.dest[0].replace(/box/, \"obj\"), line.dest[1]]\n            }\n        });\n    }\n    return { patcher: maxPatcher };\n};\n\nexport const convertSampleToUnit = (sample: number, unit: TAudioUnit, { sampleRate = 48000, bpm = 60, beatsPerMeasure = 4, division = 16 }) => {\n    if (unit === \"sample\") return { unit, str: sample.toString(), value: sample, values: [sample] };\n    const milliseconds = sample * 1000 / sampleRate;\n    const roundedMs = Math.round(milliseconds);\n    if (unit === \"measure\") {\n        const dpms = bpm * division / 60000;\n        const totalDivisions = dpms * milliseconds;\n        const roundedTotalDivisions = dpms * milliseconds;\n        const divisions = ~~(roundedTotalDivisions % division);\n        const beats = ~~(roundedTotalDivisions / division) % beatsPerMeasure + 1;\n        const measure = ~~(roundedTotalDivisions / beatsPerMeasure / division) + 1;\n        const str = `${measure}:${beats}.${divisions.toString().padStart(2, \"0\")}`;\n        return { unit, str, value: totalDivisions / division, values: [measure, beats, divisions] };\n    }\n    // if (unit === \"time\")\n    const ms = roundedMs % 1000;\n    const s = ~~(roundedMs / 1000) % 60;\n    const min = ~~(roundedMs / 60000) % 60;\n    const h = ~~(roundedMs / 3600000);\n    const str = !min ? `${s}.${ms.toString().padStart(3, \"0\")}`\n        : !h ? `${min}:${s.toString().padStart(2, \"0\")}.${ms.toString().padStart(3, \"0\")}`\n            : `${h}:${min.toString().padStart(2, \"0\")}:${s.toString().padStart(2, \"0\")}.${ms.toString().padStart(3, \"0\")}`;\n    return { unit, str, value: milliseconds / 1000, values: [h, min, s, ms] };\n};\nexport const MEASURE_UNIT_REGEX = /^((\\d+):)?(\\d+)\\.?(\\d+)?$/;\nexport const TIME_UNIT_REGEX = /^((\\d+):)??((\\d+):)?(\\d+)\\.?(\\d+)?$/;\nexport const convertUnitToSample = (str: string, unit: TAudioUnit, { sampleRate = 48000, bpm = 60, beatsPerMeasure = 4, division = 16 }) => {\n    if (unit === \"sample\") return +str || 0;\n    if (unit === \"measure\") {\n        const matched = str.match(MEASURE_UNIT_REGEX);\n        if (!matched) throw new Error(`String ${str} cannot be parsed to ${unit}`);\n        const [, , measureIn, beatsIn, divisionsIn] = matched;\n        const bps = bpm / 60;\n        const samplesPerBeat = sampleRate / bps;\n        let measures = +measureIn || 0;\n        let beats = +beatsIn || 0;\n        let divisions = +divisionsIn || 0;\n        beats += ~~(divisions / division);\n        divisions %= division;\n        measures += ~~(beats / beatsPerMeasure);\n        beats %= beatsPerMeasure;\n        return (measures * beatsPerMeasure + beats + divisions / division) * samplesPerBeat;\n    }\n    const matched = str.match(TIME_UNIT_REGEX);\n    if (!matched) throw new Error(`String ${str} cannot be parsed to ${unit}`);\n    const [, , hIn, , minIn, sIn, msIn] = matched;\n    let h = +hIn || 0;\n    let min = +minIn || 0;\n    let s = +sIn || 0;\n    let ms = +msIn || 0;\n    s += ~~(ms / 1000);\n    ms %= 1000;\n    min += ~~(s / 60);\n    s %= 60;\n    h += ~~(min / 60);\n    min %= 60;\n    return (h * 3600 + min * 60 + s + ms / 1000) * sampleRate;\n};\n\nexport const ab2sab = (ab: SharedArrayBuffer | ArrayBuffer) => {\n    if (ab instanceof ArrayBuffer) return ab;\n    const sab = new SharedArrayBuffer(ab.byteLength);\n    const ui8ab = new Uint8Array(ab);\n    const ui8sab = new Uint8Array(sab);\n    for (let i = 0; i < ui8ab.length; i++) {\n        ui8sab[i] = ui8ab[i];\n    }\n    return sab;\n};\n\nexport const sab2ab = (sab: SharedArrayBuffer | ArrayBuffer) => {\n    if (sab instanceof SharedArrayBuffer) return sab;\n    const ab = new ArrayBuffer(sab.byteLength);\n    const ui8ab = new Uint8Array(ab);\n    const ui8sab = new Uint8Array(sab);\n    for (let i = 0; i < ui8sab.length; i++) {\n        ui8ab[i] = ui8sab[i];\n    }\n    return ab;\n};\nexport const ab2str = (buf: ArrayBuffer) => {\n    return String.fromCharCode.apply(null, new Uint16Array(buf));\n};\n\nexport const str2ab = (str: string) => {\n    const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n    const bufView = new Uint16Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n};\n\nexport const getFactors = (n: number) => {\n    const factors = [1];\n    let i = 2;\n    while (i < Math.sqrt(n)) {\n        if (n % i === 0) factors.push(i, n / i);\n        i++;\n    }\n    return factors.sort((a, b) => a - b);\n};\n\nexport const getRuler = (range: [number, number], unit: TAudioUnit, { sampleRate = 48000, bpm = 60, beatsPerMeasure = 4, division = 16 }) => {\n    const ruler: Record<number, string> = {};\n    const length = range[1] - range[0];\n    let coarse: number;\n    let refined: number;\n    if (unit === \"sample\") {\n        const steps = [1, 2, 5];\n        let mag = 1;\n        let step = 0;\n        do {\n            const grid = steps[step] * mag;\n            if (step + 1 < steps.length) {\n                step++;\n            } else {\n                step = 0;\n                mag *= 10;\n            }\n            if (!coarse && length / grid <= 10) coarse = grid;\n            if (!refined && length / grid <= 50) refined = grid;\n        } while (!coarse || !refined);\n    } else if (unit === \"measure\") {\n        const bps = bpm / 60;\n        const samplesPerBeat = sampleRate / bps;\n        const divisionFactors = getFactors(division);\n        const beatsFactors = getFactors(beatsPerMeasure);\n        const measureFactors = [1, 2, 5];\n        let actualUnit: \"division\" | \"beat\" | \"measure\" = \"division\";\n        let mag = 1;\n        let step = 0;\n        do {\n            const grid = actualUnit === \"division\"\n                ? samplesPerBeat * divisionFactors[step] / division\n                : actualUnit === \"beat\"\n                    ? samplesPerBeat * beatsFactors[step]\n                    : samplesPerBeat * measureFactors[step] * mag * beatsPerMeasure;\n            if (actualUnit === \"division\") {\n                if (step + 1 < divisionFactors.length) {\n                    step++;\n                } else {\n                    actualUnit = \"beat\";\n                    step = 0;\n                }\n            } else if (actualUnit === \"beat\") {\n                if (step + 1 < beatsFactors.length) {\n                    step++;\n                } else {\n                    actualUnit = \"measure\";\n                    step = 0;\n                }\n            } else {\n                if (step + 1 < measureFactors.length) {\n                    step++;\n                } else {\n                    step = 0;\n                    mag *= 10;\n                }\n            }\n            if (!coarse && length / grid <= 10) coarse = grid;\n            if (!refined && length / grid <= 50) refined = grid;\n        } while (!coarse || !refined);\n    } else {\n        const msFactors = [1, 2, 5, 10, 20, 50, 100, 200, 500];\n        const sFactors = getFactors(60);\n        const minFactors = sFactors;\n        const hFactors = [1, 2, 5];\n        let actualUnit: \"ms\" | \"s\" | \"min\" | \"h\" = \"ms\";\n        let mag = 1;\n        let step = 0;\n        do {\n            const grid = actualUnit === \"ms\"\n                ? sampleRate * msFactors[step] / 1000\n                : actualUnit === \"s\"\n                    ? sampleRate * sFactors[step]\n                    : actualUnit === \"min\"\n                        ? sampleRate * minFactors[step] * 60\n                        : sampleRate * hFactors[step] * mag * 60;\n            if (actualUnit === \"ms\") {\n                if (step + 1 < msFactors.length) {\n                    step++;\n                } else {\n                    actualUnit = \"s\";\n                    step = 0;\n                }\n            } else if (actualUnit === \"s\") {\n                if (step + 1 < sFactors.length) {\n                    step++;\n                } else {\n                    actualUnit = \"min\";\n                    step = 0;\n                }\n            } else if (actualUnit === \"min\") {\n                if (step + 1 < minFactors.length) {\n                    step++;\n                } else {\n                    actualUnit = \"h\";\n                    step = 0;\n                }\n            } else {\n                if (step + 1 < hFactors.length) {\n                    step++;\n                } else {\n                    step = 0;\n                    mag *= 10;\n                }\n            }\n            if (!coarse && length / grid <= 10) coarse = grid;\n            if (!refined && length / grid <= 50) refined = grid;\n        } while (!coarse || !refined);\n    }\n    let m = ~~(range[0] / refined);\n    if (m * refined < range[0]) m++;\n    while (m * refined < range[1]) {\n        const t = m * refined;\n        if (t && t % coarse < 0.001 || coarse - t % coarse < 0.001) {\n            ruler[t] = unit === \"sample\" ? t.toString() : convertSampleToUnit(t, unit, { sampleRate, bpm, beatsPerMeasure, division }).str.replace(/\\.[0.]+$/, \"\");\n        } else {\n            ruler[t] = \"\";\n        }\n        m++;\n    }\n    return { ruler, coarse, refined };\n};\n","'use strict'\r\n\r\nmodule.exports = function applyWindow(signal, func) {\r\n  var i, n=signal.length, args=[0,n]\r\n\r\n  // pass rest of args\r\n  for(i=2; i<arguments.length; i++) {\r\n    args[i] = arguments[i]\r\n  }\r\n\r\n  for(i=n-1; i>=0; i--) {\r\n    args[0] = i\r\n    signal[i] *= func.apply(null,args)\r\n  }\r\n\r\n  return signal;\r\n}\r\n","'use strict'\r\n\r\nfunction bartlettHann (i,N) {\r\n  var inm1 = i/(N-1),\r\n      a0 = 0.62,\r\n      a1 = 0.48,\r\n      a2 = 0.38\r\n\r\n  return a0 - a1 * Math.abs(inm1 - 0.5) - a2 * Math.cos(6.283185307179586*inm1)\r\n}\r\n\r\nmodule.exports = bartlettHann\r\n","'use strict'\r\n\r\nfunction bartlett (i,N) {\r\n  return 1 - Math.abs( 2 * (i - 0.5*(N-1)) / (N-1) )\r\n}\r\n\r\nmodule.exports = bartlett\r\n","'use strict'\r\n\r\nfunction blackmanHarris (i,N) {\r\n  var a0 = 0.35875,\r\n      a1 = 0.48829,\r\n      a2 = 0.14128,\r\n      a3 = 0.01168,\r\n      f = 6.283185307179586*i/(N-1)\r\n\r\n  return a0 - a1*Math.cos(f) +a2*Math.cos(2*f) - a3*Math.cos(3*f)\r\n}\r\n\r\nmodule.exports = blackmanHarris\r\n","'use strict'\r\n\r\nfunction blackmanNuttall (i,N) {\r\n  var a0 = 0.3635819,\r\n      a1 = 0.4891775,\r\n      a2 = 0.1365995,\r\n      a3 = 0.0106411,\r\n      f = 6.283185307179586*i/(N-1)\r\n\r\n  return a0 - a1*Math.cos(f) +a2*Math.cos(2*f) - a3*Math.cos(3*f)\r\n}\r\n\r\nmodule.exports = blackmanNuttall\r\n","'use strict'\r\n\r\nfunction blackman (i,N) {\r\n  var a0 = 0.42,\r\n      a1 = 0.5,\r\n      a2 = 0.08,\r\n      f = 6.283185307179586*i/(N-1)\r\n\r\n  return a0 - a1 * Math.cos(f) + a2*Math.cos(2*f)\r\n}\r\n\r\nmodule.exports = blackman\r\n","'use strict'\r\n\r\nfunction cosine (i,N) {\r\n  return Math.sin(3.141592653589793*i/(N-1))\r\n}\r\n\r\nmodule.exports = cosine\r\n","'use strict'\r\n\r\nfunction exactBlackman (i,N) {\r\n  var a0 = 0.42659,\r\n      a1 = 0.49656,\r\n      a2 = 0.076849,\r\n      f = 6.283185307179586*i/(N-1)\r\n\r\n  return a0 - a1 * Math.cos(f) + a2*Math.cos(2*f)\r\n}\r\n\r\nmodule.exports = exactBlackman\r\n","'use strict'\r\n\r\nfunction flatTop (i,N) {\r\n  var a0 = 1,\r\n      a1 = 1.93,\r\n      a2 = 1.29,\r\n      a3 = 0.388,\r\n      a4 = 0.028,\r\n      f = 6.283185307179586*i/(N-1)\r\n\r\n  return a0 - a1*Math.cos(f) +a2*Math.cos(2*f) - a3*Math.cos(3*f) + a4 * Math.cos(4*f)\r\n}\r\n\r\nmodule.exports = flatTop\r\n","'use strict'\r\n\r\nfunction gaussian (i,N,sigma) {\r\n  var nm12 = 0.5*(N-1),\r\n      f = (i-nm12)/sigma/nm12\r\n\r\n  return Math.exp(-0.5*f*f)\r\n}\r\n\r\nmodule.exports = gaussian\r\n","'use strict'\r\n\r\nfunction hamming (i,N) {\r\n  return 0.54 - 0.46 * Math.cos(6.283185307179586*i/(N-1))\r\n}\r\n\r\nmodule.exports = hamming\r\n","'use strict'\r\n\r\nfunction hann (i,N) {\r\n  return 0.5*(1 - Math.cos(6.283185307179586*i/(N-1)))\r\n}\r\n\r\nmodule.exports = hann\r\n","'use strict'\r\n\r\nmodule.exports = {\r\n  lanczos: require('./lanczos'),\r\n  rectangular: require('./rectangular'),\r\n  triangular: require('./triangular'),\r\n  bartlett: require('./bartlett'),\r\n  bartlettHann: require('./bartlett-hann'),\r\n  welch: require('./welch'),\r\n  hann: require('./hann'),\r\n  hamming: require('./hamming'),\r\n  blackman: require('./blackman'),\r\n  nuttall: require('./nuttall'),\r\n  blackmanNuttall: require('./blackman-nuttall'),\r\n  blackmanHarris: require('./blackman-harris'),\r\n  exactBlackman: require('./exact-blackman'),\r\n  flatTop: require('./flat-top'),\r\n  cosine: require('./cosine'),\r\n  gaussian: require('./gaussian'),\r\n  tukey: require('./tukey')\r\n}\r\n","'use strict'\r\n\r\nfunction sinc (x) {\r\n  return x === 0 ? 1 : 0.3183098861837907 * Math.sin(Math.PI*x) / x\r\n}\r\n\r\nfunction lanczos (i, N) {\r\n  return sinc(2*i/(N-1)-1)\r\n}\r\n\r\nmodule.exports = lanczos\r\n","'use strict'\r\n\r\nvar TWOPI = Math.PI * 2\r\n\r\nfunction nuttall (i,N) {\r\n  var a0 = 0.355768,\r\n      a1 = 0.487396,\r\n      a2 = 0.144232,\r\n      a3 = 0.012604,\r\n      f = TWOPI*i/(N-1)\r\n\r\n  return a0 - a1*Math.cos(f) +a2*Math.cos(2*f) - a3*Math.cos(3*f)\r\n}\r\n\r\nmodule.exports = nuttall\r\n","'use strict'\r\n\r\nfunction rectangular (i,N) {\r\n  return 1\r\n}\r\n\r\nmodule.exports = rectangular\r\n","'use strict'\r\n\r\nfunction triangular (i,N) {\r\n  return 1 - Math.abs( 2 * (i - 0.5*(N-1)) / N )\r\n}\r\n\r\nmodule.exports = triangular\r\n","'use strict'\r\n\r\nfunction tukey (i,N, alpha) {\r\n  var anm12 = 0.5*alpha*(N-1)\r\n\r\n  if( i <= anm12 ) {\r\n    return 0.5*(1+Math.cos(Math.PI*(i/anm12 - 1)))\r\n  } else if ( i < (N-1)*(1-0.5*alpha) ) {\r\n    return 1\r\n  } else {\r\n    return 0.5*(1+Math.cos(Math.PI*(i/anm12 - 2/alpha + 1)))\r\n  }\r\n}\r\n\r\nmodule.exports = tukey\r\n","'use strict'\r\n\r\nfunction welch (i,N) {\r\n  var nm12 = 0.5*(N-1),\r\n      f = (i - nm12)/nm12\r\n  return 1 - f*f\r\n}\r\n\r\nmodule.exports = welch\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type { FaustDspFactory, FaustMonoOfflineProcessor } from \"@shren/faustwasm/dist/esm\";\nimport type { FFT, FFTW } from \"@shren/fftw-js/dist/esm-bundle\";\nimport * as WindowFunction from \"window-function\";\nimport apply from \"window-function/apply\";\nimport { setTypedArray } from \"../../utils/buffer\";\nimport { ceil, mod } from \"../../utils/math\";\nimport AudioWorkletProxyProcessor from \"./AudioWorkletProxyProcessor\";\nimport type { FaustFFTParameters, IFaustFFTNode, IFaustFFTProcessor } from \"./FaustFFT.types\";\nimport type { AudioWorkletGlobalScope, TypedAudioParamDescriptor, TypedAudioWorkletNodeOptions } from \"./TypedAudioWorklet\";\nimport type WorkletEnvProcessor from \"./WorkletEnv.worklet\";\n\nconst processorId = \"__JSPatcher_FaustFFTProcessor\";\ndeclare const globalThis: AudioWorkletGlobalScope & { SharedArrayBuffer: typeof SharedArrayBuffer | typeof ArrayBuffer; Atomics: typeof Atomics; jspatcherEnv: WorkletEnvProcessor };\nif (!globalThis.SharedArrayBuffer) globalThis.SharedArrayBuffer = ArrayBuffer;\nconst { registerProcessor, sampleRate, jspatcherEnv } = globalThis;\n\nconst fftToSignal = (f: Float32Array) => {\n    const fftSize = f.length;\n    const len = fftSize / 2 + 1;\n    const r = new Float32Array(len);\n    const i = new Float32Array(len);\n    const b = new Float32Array(len);\n    for (let j = 0; j < len; j++) {\n        r[j] = f[j] / fftSize;\n        i[j] = (j === 0 || j === len - 1) ? 0 : f[fftSize - j] / fftSize;\n        b[j] = j;\n    }\n    return [r, i, b];\n};\n\nconst signalToFFT = (r: Float32Array, i: Float32Array) => {\n    const len = (r.length - 1) * 2;\n    const f = new Float32Array(len);\n    for (let j = 0; j < r.length; j++) {\n        f[j] = r[j];\n        if (j === 0 || j === r.length - 1) continue;\n        f[len - j] = i[j];\n    }\n    return f;\n};\n\nclass FaustFFTProcessor extends AudioWorkletProxyProcessor<IFaustFFTProcessor, IFaustFFTNode, FaustFFTParameters> implements IFaustFFTProcessor {\n    static get parameterDescriptors(): TypedAudioParamDescriptor<FaustFFTParameters>[] {\n        return [{\n            defaultValue: 1024,\n            maxValue: 2 ** 32,\n            minValue: 1,\n            name: \"fftSize\"\n        }, {\n            defaultValue: 2,\n            maxValue: 32,\n            minValue: 1,\n            name: \"fftOverlap\"\n        }, {\n            defaultValue: 3,\n            maxValue: 4,\n            minValue: 0,\n            name: \"windowFunction\"\n        }];\n    }\n    private destroyed = false;\n    /** Pointer of next start sample to write of the input window */\n    private $inputWrite = 0;\n    /** Pointer of next start sample to read of the input window */\n    private $inputRead = 0;\n    /** Pointer of next start sample to write of the output window */\n    private $outputWrite = 0;\n    /** Pointer of next start sample to read of the output window */\n    private $outputRead = 0;\n    /** audio data from input, array of channels */\n    private readonly fftInput: Float32Array[] = [];\n    /** audio data for output, array of channels */\n    private readonly fftOutput: Float32Array[] = [];\n    /** Generated from the current window function */\n    private window: Float32Array;\n    /** Generated from the current window's rolling sum square */\n    private windowSumSquare: Float32Array;\n    destroy() {\n        this.fftProcessor?.stop();\n        this.fftProcessor?.destroy();\n        this.destroyed = true;\n        this._disposed = true;\n    }\n    private fftw: FFTW;\n    private get FFT1D() {\n        return this.fftw.r2r.FFT1D;\n    }\n    private rfft: FFT;\n    private fftProcessorFactory: FaustDspFactory;\n    private fftProcessor: FaustMonoOfflineProcessor;\n    private fftOverlap = 0;\n    private fftHopSize = 0;\n    private fftSize = 0;\n    private fftBufferSize = 0;\n    get fftBins() {\n        return this.fftSize / 2;\n    }\n    get fftProcessorBufferSize() {\n        return this.fftSize / 2 + 1;\n    }\n    private windowFunction = WindowFunction.blackman;\n    resetFFT(sizeIn: number, overlapIn: number, windowFunctionIn: number, inputChannels: number, outputChannels: number, bufferSize: number) {\n        const fftSize = ~~ceil(Math.max(2, sizeIn || 1024), 2);\n        const fftOverlap = ~~Math.min(fftSize, Math.max(1, overlapIn));\n        const fftHopSize = ~~Math.max(1, fftSize / fftOverlap);\n        const latency = fftSize - Math.min(fftHopSize, bufferSize);\n        let windowFunction: (i: number, N: number) => number = null;\n        if (windowFunctionIn !== 0) {\n            const id = ([\"blackman\", \"hamming\", \"hann\", \"triangular\"] as const)[~~windowFunctionIn - 1];\n            windowFunction = WindowFunction[id];\n        }\n        const fftSizeChanged = fftSize !== this.fftSize;\n        if (fftSizeChanged || fftOverlap !== this.fftOverlap) {\n            this.fftSize = fftSize;\n            this.fftOverlap = fftOverlap;\n            this.fftHopSize = fftHopSize;\n            this.$inputWrite = 0;\n            this.$inputRead = 0;\n            this.$outputWrite = 0;\n            this.$outputRead = -latency;\n            this.fftBufferSize = Math.max(fftSize * 2 - this.fftHopSize, bufferSize * 2);\n        }\n        if (fftSizeChanged) {\n            this.rfft?.dispose();\n            this.rfft = new this.FFT1D(fftSize);\n            this.createFFTProcessor();\n        }\n        if (fftSizeChanged || windowFunction !== this.windowFunction) {\n            this.windowFunction = windowFunction;\n            this.window = new Float32Array(fftSize);\n            this.window.fill(1);\n            if (windowFunction) apply(this.window, windowFunction);\n            this.windowSumSquare = new Float32Array(this.fftBufferSize);\n        }\n        if (this.fftInput.length > inputChannels) {\n            this.fftInput.splice(inputChannels);\n        }\n        if (this.fftOutput.length > outputChannels) {\n            this.fftOutput.splice(outputChannels);\n        }\n        if (fftSizeChanged) {\n            for (let i = 0; i < inputChannels; i++) {\n                this.fftInput[i] = new Float32Array(this.fftBufferSize);\n            }\n            for (let i = 0; i < outputChannels; i++) {\n                this.fftOutput[i] = new Float32Array(this.fftBufferSize);\n            }\n        } else {\n            if (this.fftInput.length < inputChannels) {\n                for (let i = this.fftInput.length; i < inputChannels; i++) {\n                    this.fftInput[i] = new Float32Array(this.fftBufferSize);\n                }\n            }\n            if (this.fftOutput.length < outputChannels) {\n                for (let i = this.fftOutput.length; i < outputChannels; i++) {\n                    this.fftOutput[i] = new Float32Array(this.fftBufferSize);\n                }\n            }\n        }\n    }\n    constructor(options: TypedAudioWorkletNodeOptions<{ factory: FaustDspFactory }>) {\n        super(options);\n        this.fftProcessorFactory = options.processorOptions.factory;\n        this.init();\n    }\n    async init(): Promise<true> {\n        this.fftw = jspatcherEnv.fftw;\n        await this.createFFTProcessor();\n        return true;\n    }\n    processFFT() {\n        let samplesForFFT = mod(this.$inputWrite - this.$inputRead, this.fftBufferSize) || this.fftBufferSize;\n        while (samplesForFFT >= this.fftSize) {\n            const fftProcessorInputs = [];\n            const fftProcessorOutputs = new Array(this.fftProcessor.getNumOutputs()).fill(null).map(() => new Float32Array(this.fftProcessorBufferSize));\n            for (let i = 0; i < this.fftInput.length; i++) {\n                const fftBuffer = new Float32Array(this.fftSize);\n                setTypedArray(fftBuffer, this.fftInput[i], 0, this.$inputRead);\n                for (let j = 0; j < fftBuffer.length; j++) {\n                    fftBuffer[j] *= this.window[j];\n                }\n                const ffted = this.rfft.forward(fftBuffer);\n                fftProcessorInputs.push(...fftToSignal(ffted));\n            }\n            this.$inputRead += this.fftHopSize;\n            this.$inputRead %= this.fftBufferSize;\n            samplesForFFT -= this.fftHopSize;\n            this.fftProcessor.compute(fftProcessorInputs.slice(0, this.fftProcessor.getNumInputs()), fftProcessorOutputs);\n            for (let i = 0; i < this.fftOutput.length; i++) {\n                const ifftBuffer = signalToFFT(fftProcessorOutputs[i * 2] || new Float32Array(this.fftProcessorBufferSize), fftProcessorOutputs[i * 2 + 1] || new Float32Array(this.fftProcessorBufferSize));\n                const iffted = this.rfft.inverse(ifftBuffer);\n                for (let j = 0; j < iffted.length; j++) {\n                    iffted[j] *= this.window[j];\n                }\n                let $: number;\n                for (let j = 0; j < iffted.length - this.fftHopSize; j++) {\n                    $ = mod(this.$outputWrite + j, this.fftBufferSize);\n                    this.fftOutput[i][$] += iffted[j];\n                    this.windowSumSquare[$] += this.window[j] ** 2;\n                }\n                for (let j = iffted.length - this.fftHopSize; j < iffted.length; j++) {\n                    $ = mod(this.$outputWrite + j, this.fftBufferSize);\n                    this.fftOutput[i][$] = iffted[j];\n                    this.windowSumSquare[$] = this.window[j] ** 2;\n                }\n            }\n            this.$outputWrite += this.fftHopSize;\n            this.$outputWrite %= this.fftBufferSize;\n        }\n    }\n    async createFFTProcessor() {\n        this.fftProcessor?.stop();\n        this.fftProcessor?.destroy();\n        const { Faust } = jspatcherEnv as WorkletEnvProcessor;\n        const { FaustMonoDspGenerator } = Faust;\n        const gen = new FaustMonoDspGenerator();\n        this.fftProcessor = await gen.createOfflineProcessor(sampleRate, this.fftProcessorBufferSize, this.fftProcessorFactory) as FaustMonoOfflineProcessor;\n        const params = this.fftProcessor.getParams();\n        this.fftProcessor.start();\n        const fftSizeParam = params.find(s => s.endsWith(\"/fftSize\"));\n        if (fftSizeParam) this.fftProcessor.setParamValue(fftSizeParam, this.fftSize);\n    }\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<FaustFFTParameters, Float32Array>) {\n        if (this.destroyed) return false;\n        if (!this.fftw) return true;\n        const input = inputs[0];\n        const output = outputs[0];\n        const inputChannels = input.length;\n        const outputChannels = output.length;\n        if (input.length === 0) return true;\n\n        const bufferSize = Math.max(...input.map(c => c.length)) || 128;\n\n        this.resetFFT(~~parameters.fftSize[0], ~~parameters.fftOverlap[0], ~~parameters.windowFunction[0], inputChannels, outputChannels, bufferSize);\n\n        if (!this.fftProcessor) return true;\n\n        let $inputWrite: number;\n        for (let i = 0; i < input.length; i++) {\n            const inputWindow = this.fftInput[i];\n            const channel = input[i].length ? input[i] : new Float32Array(bufferSize);\n            $inputWrite = setTypedArray(inputWindow, channel, this.$inputWrite);\n        }\n        this.$inputWrite = $inputWrite;\n\n        this.processFFT();\n\n        for (let i = 0; i < output.length; i++) {\n            setTypedArray(output[i], this.fftOutput[i], 0, this.$outputRead);\n            // let a = 0;\n            let div = 0;\n            for (let j = 0; j < bufferSize; j++) {\n                div = this.windowSumSquare[mod(this.$outputRead + j, this.fftBufferSize)];\n                output[i][j] /= div < Number.EPSILON ? 1 : div;\n                // a = output[i][j];\n                // b = this.windowSumSquare[mod(this.$outputRead + j, this.fftBufferSize)];\n                // output[i][j] = Math.abs(a - b) < Number.EPSILON ? Math.sign(a * b) : b < Number.EPSILON ? Math.sign(a * b) : a / b;\n            }\n        }\n        this.$outputRead += bufferSize;\n        this.$outputRead %= this.fftBufferSize;\n        return true;\n    }\n}\ntry {\n    registerProcessor(processorId, FaustFFTProcessor);\n} catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn(error);\n}\n"],"names":["_a","call","e","sum","zcr","flux","str","matched"],"sourceRoot":""}