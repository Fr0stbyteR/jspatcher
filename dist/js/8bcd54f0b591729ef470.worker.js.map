{"version":3,"file":"js/8bcd54f0b591729ef470.worker.js","mappings":";;;;;;;;;;;;;;;AAAA;AAGA,MAAM,UAAS,WAAkB;AAAA,EAG7B,cAAc;AADd,qBAAY;AAER,UAAM,WAAsD,CAAC;AAC7D,UAAM,UAAqD,CAAC;AAC5D,QAAI,uBAAuB;AAC3B,UAAM,iBAAiB,MAAM;AACzB,0BAAoB,WAAW,aAAa;AAC5C,YAAM;AAAA,IACV;AACA,UAAM,gBAAgB,OAAO,MAA8D;AAdnG,UAAAA,KAAA;AAeY,YAAM,EAAE,IAAI,MAAAC,OAAM,MAAM,OAAO,MAAM,IAAI,EAAE;AAC3C,UAAIA,OAAM;AACN,cAAM,IAAyB,EAAE,GAAG;AACpC,YAAI;AACA,YAAE,QAAQ,MAAO,KAAaA,KAAI,EAAE,GAAG,IAAI;AAAA,QAC/C,SAASC,IAAP;AACE,YAAE,QAAQA;AAAA,QACd;AACA,oBAAY,CAAQ;AACpB,YAAI,KAAK;AAAW,yBAAe;AAAA,MACvC,OAAO;AACH,YAAI;AAAO,WAAAF,MAAA,QAAQ,QAAR,gBAAAA,IAAA,cAAc;AAAA,iBAChB,SAAS,EAAE;AAAG,yBAAS,QAAT,kCAAe;AACtC,eAAO,SAAS,EAAE;AAClB,eAAO,QAAQ,EAAE;AAAA,MACrB;AAAA,IACJ;AACA,UAAM,OAAO,CAACC,UAAiB,SAAgB,IAAI,QAAa,CAAC,SAAS,WAAW;AACjF,YAAM,KAAK;AACX,eAAS,EAAE,IAAI;AACf,cAAQ,EAAE,IAAI;AACd,kBAAY,EAAE,IAAI,MAAAA,OAAM,KAAK,CAAC;AAAA,IAClC,CAAC;AACD,UAAM,OAAQ,KAAK;AACnB,SAAK,QAAQ,QAAQ,UAAS,KAAa,IAAI,IAAI,IAAI,SAAgB,KAAK,MAAM,GAAG,IAAI,CAAC;AAC1F,qBAAiB,WAAW,aAAa;AAAA,EAC7C;AACJ,GAvCe,GACJ,UAAoB,CAAC,GADjB;AAyCf,iEAAe,MAAM,EAAC;;;;;;;UC5CtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACJwC;AAExC,MAAM,MAAM,WAAW,qBAAqB,WAAW;AACvD,MAAM,iBAAiB,oDAAW,CAA6C;AAAA,EAC3E,SAAS,QAAwB,cAAc,IAAI;AAC/C,UAAM,eAA6B,CAAC;AACpC,QAAI,OAAO,WAAW;AAAG,aAAO;AAChC,UAAM,IAAI,OAAO,CAAC,EAAE;AACpB,aAAS,aAAa,aAAa,cAAc,IAAI,aAAa,cAAc,aAAa;AACzF,YAAM,WAA6B,CAAC;AACpC,mBAAa,UAAU,IAAI;AAC3B,YAAM,aAAa,KAAK,KAAK,IAAI,UAAU;AAC3C,YAAM,UAAU,IAAI,WAAW,IAAI,IAAI,aAAa,WAAW,iBAAiB,CAAC;AACjF,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,gBAAQ,CAAC,IAAI,IAAI;AAAA,MACrB;AACA,eAAS,MAAM;AACf,eAAS,UAAU,GAAG,UAAU,OAAO,QAAQ,WAAW;AACtD,cAAM,UAAU,OAAO,OAAO;AAC9B,cAAM,UAAU,IAAI,aAAa,IAAI,IAAI,aAAa,aAAa,iBAAiB,CAAC;AACrF,cAAM,UAAU,IAAI,aAAa,IAAI,IAAI,aAAa,aAAa,iBAAiB,CAAC;AACrF,iBAAS,OAAO,IAAI,EAAE,KAAK,SAAS,KAAK,QAAQ;AACjD,YAAI;AACJ,YAAI;AACJ,YAAI;AACJ,YAAI;AACJ,YAAI,eAAe,aAAa;AAC5B,cAAI;AACJ,mBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,mBAAO,QAAQ,CAAC;AAChB,oBAAQ,IAAI;AACZ,mBAAO,CAAC,EAAE,IAAI;AACd,gBAAI,UAAU,GAAG;AACb,0BAAY;AACZ,0BAAY;AAAA,YAChB,OAAO;AACH,kBAAI,OAAO;AAAW,4BAAY;AAClC,kBAAI,OAAO;AAAW,4BAAY;AAAA,YACtC;AACA,gBAAI,UAAU,cAAc,KAAK,UAAU,IAAI,GAAG;AAC9C,sBAAQ,IAAI,IAAI;AAChB,sBAAQ,IAAI,IAAI;AAAA,YACpB;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,gBAAM,EAAE,KAAK,QAAQ,IAAI,aAAa,aAAa,WAAW;AAC9D,gBAAM,EAAE,KAAK,SAAS,KAAK,QAAQ,IAAI,aAAa,aAAa,WAAW,EAAE,OAAO;AACrF,cAAI;AACJ,cAAI;AACJ,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,sBAAU,QAAQ,CAAC;AACnB,sBAAU,QAAQ,CAAC;AACnB,oBAAQ,IAAI;AACZ,mBAAO,CAAC,EAAE,IAAI;AACd,gBAAI,UAAU,GAAG;AACb,0BAAY;AACZ,0BAAY;AAAA,YAChB,OAAO;AACH,kBAAI,UAAU;AAAW,4BAAY;AACrC,kBAAI,UAAU;AAAW,4BAAY;AAAA,YACzC;AACA,gBAAI,UAAU,cAAc,GAAG;AAC3B,sBAAQ,IAAI,IAAI;AAChB,sBAAQ,IAAI,IAAI;AAAA,YACpB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAI,SAAS","sources":["webpack://JSPatcher/./src/core/workers/ProxyWorker.ts","webpack://JSPatcher/webpack/bootstrap","webpack://JSPatcher/webpack/runtime/define property getters","webpack://JSPatcher/webpack/runtime/hasOwnProperty shorthand","webpack://JSPatcher/webpack/runtime/make namespace object","webpack://JSPatcher/./src/core/workers/Waveform.worker.ts"],"sourcesContent":["import { ProxyWorker } from \"./ProxyWorker.types\";\nimport { MessagePortResponse, MessagePortRequest } from \"./Worker\";\n\nconst Worker = class ProxyWorker {\n    static fnNames: string[] = [];\n    _disposed = false;\n    constructor() {\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = -1;\n        const handleDisposed = () => {\n            removeEventListener(\"message\", handleMessage);\n            close();\n        };\n        const handleMessage = async (e: MessageEvent<MessagePortResponse & MessagePortRequest>) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                postMessage(r as any);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) rejects[id]?.(error);\n                else if (resolves[id]) resolves[id]?.(value);\n                delete resolves[id];\n                delete rejects[id];\n            }\n        };\n        const call = (call: string, ...args: any[]) => new Promise<any>((resolve, reject) => {\n            const id = messagePortRequestId--;\n            resolves[id] = resolve;\n            rejects[id] = reject;\n            postMessage({ id, call, args });\n        });\n        const Ctor = (this.constructor as typeof ProxyWorker);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        addEventListener(\"message\", handleMessage);\n    }\n} as typeof ProxyWorker;\n\nexport default Worker;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { IWaveformWorker } from \"./WaveformWorker.types\";\nimport { WaveformData, WaveformStepData } from \"../types\";\nimport ProxyWorker from \"./ProxyWorker\";\n\nconst SAB = globalThis.SharedArrayBuffer || globalThis.ArrayBuffer;\nclass Waveform extends ProxyWorker<IWaveformWorker> implements IWaveformWorker {\n    generate(buffer: Float32Array[], stepsFactor = 16) {\n        const waveformData: WaveformData = {};\n        if (buffer.length === 0) return waveformData;\n        const l = buffer[0].length;\n        for (let stepLength = stepsFactor; stepLength <= l / stepsFactor; stepLength *= stepsFactor) {\n            const stepData: WaveformStepData = [];\n            waveformData[stepLength] = stepData;\n            const stepsCount = Math.ceil(l / stepLength);\n            const idxData = new Int32Array(new SAB(stepsCount * Int32Array.BYTES_PER_ELEMENT));\n            for (let i = 0; i < idxData.length; i++) {\n                idxData[i] = i * stepLength;\n            }\n            stepData.idx = idxData;\n            for (let channel = 0; channel < buffer.length; channel++) {\n                const samples = buffer[channel];\n                const minData = new Float32Array(new SAB(stepsCount * Float32Array.BYTES_PER_ELEMENT));\n                const maxData = new Float32Array(new SAB(stepsCount * Float32Array.BYTES_PER_ELEMENT));\n                stepData[channel] = { min: minData, max: maxData };\n                let maxInStep: number;\n                let minInStep: number;\n                let $step: number;\n                let step: number;\n                if (stepLength === stepsFactor) {\n                    let samp: number;\n                    for (let i = 0; i < l; i++) {\n                        samp = samples[i];\n                        $step = i % stepsFactor;\n                        step = ~~(i / stepsFactor);\n                        if ($step === 0) {\n                            maxInStep = samp;\n                            minInStep = samp;\n                        } else {\n                            if (samp > maxInStep) maxInStep = samp;\n                            if (samp < minInStep) minInStep = samp;\n                        }\n                        if ($step === stepsFactor - 1 || $step === l - 1) {\n                            minData[step] = minInStep;\n                            maxData[step] = maxInStep;\n                        }\n                    }\n                } else {\n                    const { idx: prevIdx } = waveformData[stepLength / stepsFactor];\n                    const { min: prevMin, max: prevMax } = waveformData[stepLength / stepsFactor][channel];\n                    let sampMin: number;\n                    let sampMax: number;\n                    for (let i = 0; i < prevIdx.length; i++) {\n                        sampMin = prevMin[i];\n                        sampMax = prevMax[i];\n                        $step = i % stepsFactor;\n                        step = ~~(i / stepsFactor);\n                        if ($step === 0) {\n                            maxInStep = sampMax;\n                            minInStep = sampMin;\n                        } else {\n                            if (sampMax > maxInStep) maxInStep = sampMax;\n                            if (sampMin < minInStep) minInStep = sampMin;\n                        }\n                        if ($step === stepsFactor - 1) {\n                            minData[step] = minInStep;\n                            maxData[step] = maxInStep;\n                        }\n                    }\n                }\n            }\n        }\n        return waveformData;\n    }\n}\n// eslint-disable-next-line no-new\nnew Waveform();\n"],"names":["_a","call","e"],"sourceRoot":""}