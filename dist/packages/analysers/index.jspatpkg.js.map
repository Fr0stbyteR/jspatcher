{"version":3,"file":"index.jspatpkg.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+BAA+B;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;;;AAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D,OAAO;AAClE;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,EAAE,aAAa,EAAE;AAChE;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,OAAO;AACnE;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;;AAEA,8BAA8B;AAC9B;AACA,cAAc,OAAO;AACrB;;AAEA;AACA,gEAAgE;AAChE,kBAAkB;AAClB,kEAAkE;AAClE,kBAAkB;AAClB,mEAAmE;AACnE;;AAEA,wDAAwD;AACxD;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AA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","sources":["webpack://@jspatcher/package-analysers/./node_modules/color-js/color.js","webpack://@jspatcher/package-analysers/./src/index.ts","webpack://@jspatcher/package-analysers/./src/objects/base.ts","webpack://@jspatcher/package-analysers/./src/objects/default.ts","webpack://@jspatcher/package-analysers/./src/objects/oscilloscope.ts","webpack://@jspatcher/package-analysers/./src/objects/spectral-analyser.ts","webpack://@jspatcher/package-analysers/./src/objects/spectrogram.ts","webpack://@jspatcher/package-analysers/./src/objects/spectroscope.ts","webpack://@jspatcher/package-analysers/./src/objects/temporal-analyser.ts","webpack://@jspatcher/package-analysers/./src/package-info.ts","webpack://@jspatcher/package-analysers/./src/sdk.ts","webpack://@jspatcher/package-analysers/./src/ui/oscilloscope.ts","webpack://@jspatcher/package-analysers/./src/ui/spectrogram.ts","webpack://@jspatcher/package-analysers/./src/ui/spectroscope.ts","webpack://@jspatcher/package-analysers/webpack/bootstrap","webpack://@jspatcher/package-analysers/webpack/runtime/compat get default export","webpack://@jspatcher/package-analysers/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-analysers/webpack/runtime/define property getters","webpack://@jspatcher/package-analysers/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-analysers/webpack/runtime/make namespace object","webpack://@jspatcher/package-analysers/./src/index.jspatpkg.ts"],"sourcesContent":["// Copyright (c) 2008-2013, Andrew Brehaut, Tim Baumann, Matt Wilson, \n//                          Simon Heimler, Michel Vielmetter \n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice,\n//   this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\n// color.js - version 1.0.1\n//\n// HSV <-> RGB code based on code from http://www.cs.rit.edu/~ncs/color/t_convert.html\n// object function created by Douglas Crockford.\n// Color scheme degrees taken from the colorjack.com colorpicker\n//\n// HSL support kindly provided by Tim Baumann - http://github.com/timjb\n\n// create namespaces\n/*global net */\nif (\"undefined\" == typeof net) {\n    var net = {};\n}\nif (!net.brehaut) {\n    net.brehaut = {};\n}\n\n// this module function is called with net.brehaut as 'this'\n(function() {\n    \"use strict\";\n    // Constants\n\n    // css_colors maps color names onto their hex values\n    // these names are defined by W3C\n    \n    var css_colors = {aliceblue:'#F0F8FF',antiquewhite:'#FAEBD7',aqua:'#00FFFF',aquamarine:'#7FFFD4',azure:'#F0FFFF',beige:'#F5F5DC',bisque:'#FFE4C4',black:'#000000',blanchedalmond:'#FFEBCD',blue:'#0000FF',blueviolet:'#8A2BE2',brown:'#A52A2A',burlywood:'#DEB887',cadetblue:'#5F9EA0',chartreuse:'#7FFF00',chocolate:'#D2691E',coral:'#FF7F50',cornflowerblue:'#6495ED',cornsilk:'#FFF8DC',crimson:'#DC143C',cyan:'#00FFFF',darkblue:'#00008B',darkcyan:'#008B8B',darkgoldenrod:'#B8860B',darkgray:'#A9A9A9',darkgrey:'#A9A9A9',darkgreen:'#006400',darkkhaki:'#BDB76B',darkmagenta:'#8B008B',darkolivegreen:'#556B2F',darkorange:'#FF8C00',darkorchid:'#9932CC',darkred:'#8B0000',darksalmon:'#E9967A',darkseagreen:'#8FBC8F',darkslateblue:'#483D8B',darkslategray:'#2F4F4F',darkslategrey:'#2F4F4F',darkturquoise:'#00CED1',darkviolet:'#9400D3',deeppink:'#FF1493',deepskyblue:'#00BFFF',dimgray:'#696969',dimgrey:'#696969',dodgerblue:'#1E90FF',firebrick:'#B22222',floralwhite:'#FFFAF0',forestgreen:'#228B22',fuchsia:'#FF00FF',gainsboro:'#DCDCDC',ghostwhite:'#F8F8FF',gold:'#FFD700',goldenrod:'#DAA520',gray:'#808080',grey:'#808080',green:'#008000',greenyellow:'#ADFF2F',honeydew:'#F0FFF0',hotpink:'#FF69B4',indianred:'#CD5C5C',indigo:'#4B0082',ivory:'#FFFFF0',khaki:'#F0E68C',lavender:'#E6E6FA',lavenderblush:'#FFF0F5',lawngreen:'#7CFC00',lemonchiffon:'#FFFACD',lightblue:'#ADD8E6',lightcoral:'#F08080',lightcyan:'#E0FFFF',lightgoldenrodyellow:'#FAFAD2',lightgray:'#D3D3D3',lightgrey:'#D3D3D3',lightgreen:'#90EE90',lightpink:'#FFB6C1',lightsalmon:'#FFA07A',lightseagreen:'#20B2AA',lightskyblue:'#87CEFA',lightslategray:'#778899',lightslategrey:'#778899',lightsteelblue:'#B0C4DE',lightyellow:'#FFFFE0',lime:'#00FF00',limegreen:'#32CD32',linen:'#FAF0E6',magenta:'#FF00FF',maroon:'#800000',mediumaquamarine:'#66CDAA',mediumblue:'#0000CD',mediumorchid:'#BA55D3',mediumpurple:'#9370D8',mediumseagreen:'#3CB371',mediumslateblue:'#7B68EE',mediumspringgreen:'#00FA9A',mediumturquoise:'#48D1CC',mediumvioletred:'#C71585',midnightblue:'#191970',mintcream:'#F5FFFA',mistyrose:'#FFE4E1',moccasin:'#FFE4B5',navajowhite:'#FFDEAD',navy:'#000080',oldlace:'#FDF5E6',olive:'#808000',olivedrab:'#6B8E23',orange:'#FFA500',orangered:'#FF4500',orchid:'#DA70D6',palegoldenrod:'#EEE8AA',palegreen:'#98FB98',paleturquoise:'#AFEEEE',palevioletred:'#D87093',papayawhip:'#FFEFD5',peachpuff:'#FFDAB9',peru:'#CD853F',pink:'#FFC0CB',plum:'#DDA0DD',powderblue:'#B0E0E6',purple:'#800080',rebeccapurple:'#663399',red:'#FF0000',rosybrown:'#BC8F8F',royalblue:'#4169E1',saddlebrown:'#8B4513',salmon:'#FA8072',sandybrown:'#F4A460',seagreen:'#2E8B57',seashell:'#FFF5EE',sienna:'#A0522D',silver:'#C0C0C0',skyblue:'#87CEEB',slateblue:'#6A5ACD',slategray:'#708090',slategrey:'#708090',snow:'#FFFAFA',springgreen:'#00FF7F',steelblue:'#4682B4',tan:'#D2B48C',teal:'#008080',thistle:'#D8BFD8',tomato:'#FF6347',turquoise:'#40E0D0',violet:'#EE82EE',wheat:'#F5DEB3',white:'#FFFFFF',whitesmoke:'#F5F5F5',yellow:'#FFFF00',yellowgreen:'#9ACD32'};\n\n\n    // CSS value regexes, according to http://www.w3.org/TR/css3-values/\n    var css_integer = '(?:\\\\+|-)?\\\\d+';\n    var css_float = '(?:\\\\+|-)?\\\\d*\\\\.\\\\d+';\n    var css_number = '(?:' + css_integer + ')|(?:' + css_float + ')';\n    css_integer = '(' + css_integer + ')';\n    css_float = '(' + css_float + ')';\n    css_number = '(' + css_number + ')';\n    var css_percentage = css_number + '%';\n    var css_whitespace = '\\\\s*?';\n\n    // http://www.w3.org/TR/2003/CR-css3-color-20030514/\n    var hsl_hsla_regex = new RegExp([\n        '^hsl(a?)\\\\(', css_number, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_integer_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_integer, ',', css_integer, ',', css_integer, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_percentage_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_percentage, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n\n    // Package wide variables\n\n    // becomes the top level prototype object\n    var color;\n\n    /* registered_models contains the template objects for all the\n     * models that have been registered for the color class.\n     */\n    var registered_models = [];\n\n\n    /* factories contains methods to create new instance of\n     * different color models that have been registered.\n     */\n    var factories = {};\n\n    // Utility functions\n\n    /* object is Douglas Crockfords object function for prototypal\n     * inheritance.\n     */\n    if (!this.object) {\n        this.object = function(o) {\n            function F() {}\n            F.prototype = o;\n            return new F();\n        };\n    }\n    var object = this.object;\n\n    /* takes a value, converts to string if need be, then pads it\n     * to a minimum length.\n     */\n    function pad(val, len) {\n        val = val.toString();\n        var padded = [];\n\n        for (var i = 0, j = Math.max(len - val.length, 0); i < j; i++) {\n            padded.push('0');\n        }\n\n        padded.push(val);\n        return padded.join('');\n    }\n\n\n    /* takes a string and returns a new string with the first letter\n     * capitalised\n     */\n    function capitalise(s) {\n        return s.slice(0, 1).toUpperCase() + s.slice(1);\n    }\n\n    /* removes leading and trailing whitespace\n     */\n    function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /* used to apply a method to object non-destructively by\n     * cloning the object and then apply the method to that\n     * new object\n     */\n    function cloneOnApply(meth) {\n        return function() {\n            var cloned = this.clone();\n            meth.apply(cloned, arguments);\n            return cloned;\n        };\n    }\n\n\n    /* registerModel is used to add additional representations\n     * to the color code, and extend the color API with the new\n     * operation that model provides. see before for examples\n     */\n    function registerModel(name, model) {\n        var proto = object(color);\n        var fields = []; // used for cloning and generating accessors\n\n        var to_meth = 'to' + capitalise(name);\n\n        function convertAndApply(meth) {\n            return function() {\n                return meth.apply(this[to_meth](), arguments);\n            };\n        }\n\n        for (var key in model)\n            if (model.hasOwnProperty(key)) {\n                proto[key] = model[key];\n                var prop = proto[key];\n\n                if (key.slice(0, 1) == '_') {\n                    continue;\n                }\n                if (!(key in color) && \"function\" == typeof prop) {\n                    // the method found on this object is a) public and b) not\n                    // currently supported by the color object. Create an impl that\n                    // calls the toModel function and passes that new object\n                    // onto the correct method with the args.\n                    color[key] = convertAndApply(prop);\n                } else if (\"function\" != typeof prop) {\n                    // we have found a public property. create accessor methods\n                    // and bind them up correctly\n                    fields.push(key);\n                    var getter = 'get' + capitalise(key);\n                    var setter = 'set' + capitalise(key);\n\n                    color[getter] = convertAndApply(\n                        proto[getter] = (function(key) {\n                            return function() {\n                                return this[key];\n                            };\n                        })(key)\n                    );\n\n                    color[setter] = convertAndApply(\n                        proto[setter] = (function(key) {\n                            return function(val) {\n                                var cloned = this.clone();\n                                cloned[key] = val;\n                                return cloned;\n                            };\n                        })(key)\n                    );\n                }\n            } // end of for over model\n\n            // a method to create a new object - largely so prototype chains dont\n            // get insane. This uses an unrolled 'object' so that F is cached\n            // for later use. this is approx a 25% speed improvement\n\n        function F() {}\n        F.prototype = proto;\n\n        function factory() {\n            return new F();\n        }\n        factories[name] = factory;\n\n        proto.clone = function() {\n            var cloned = factory();\n            for (var i = 0, j = fields.length; i < j; i++) {\n                var key = fields[i];\n                cloned[key] = this[key];\n            }\n            return cloned;\n        };\n\n        color[to_meth] = function() {\n            return factory();\n        };\n\n        registered_models.push(proto);\n\n        return proto;\n    } // end of registerModel\n\n    // Template Objects\n\n    /* color is the root object in the color hierarchy. It starts\n     * life as a very simple object, but as color models are\n     * registered it has methods programmatically added to manage\n     * conversions as needed.\n     */\n    color = {\n        /* fromObject takes an argument and delegates to the internal\n         * color models to try to create a new instance.\n         */\n        fromObject: function(o) {\n            if (!o) {\n                return object(color);\n            }\n\n            for (var i = 0, j = registered_models.length; i < j; i++) {\n                var nu = registered_models[i].fromObject(o);\n                if (nu) {\n                    return nu;\n                }\n            }\n\n            return object(color);\n        },\n\n        toString: function() {\n            return this.toCSS();\n        }\n    };\n\n    var transparent = null; // defined with an RGB later.\n\n    /* RGB is the red green blue model. This definition is converted\n     * to a template object by registerModel.\n     */\n    registerModel('RGB', {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 0,\n\n        /* getLuminance returns a value between 0 and 1, this is the\n         * luminance calcuated according to\n         * http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9\n         */\n        getLuminance: function() {\n            return (this.red * 0.2126) + (this.green * 0.7152) + (this.blue * 0.0722);\n        },\n\n        /* does an alpha based blend of color onto this. alpha is the\n         * amount of 'color' to use. (0 to 1)\n         */\n        blend: function(color, alpha) {\n            color = color.toRGB();\n            alpha = Math.min(Math.max(alpha, 0), 1);\n            var rgb = this.clone();\n\n            rgb.red = (rgb.red * (1 - alpha)) + (color.red * alpha);\n            rgb.green = (rgb.green * (1 - alpha)) + (color.green * alpha);\n            rgb.blue = (rgb.blue * (1 - alpha)) + (color.blue * alpha);\n            rgb.alpha = (rgb.alpha * (1 - alpha)) + (color.alpha * alpha);\n\n            return rgb;\n        },\n\n        /* fromObject attempts to convert an object o to and RGB\n         * instance. This accepts an object with red, green and blue\n         * members or a string. If the string is a known CSS color name\n         * or a hexdecimal string it will accept it.\n         */\n        fromObject: function(o) {\n            if (o instanceof Array) {\n                return this._fromRGBArray(o);\n            }\n            if (\"string\" == typeof o) {\n                return this._fromCSS(trim(o));\n            }\n            if (o.hasOwnProperty('red') &&\n                o.hasOwnProperty('green') &&\n                o.hasOwnProperty('blue')) {\n                return this._fromRGB(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _stringParsers: [\n            // CSS RGB(A) literal:\n            function(css) {\n                css = trim(css);\n\n                var withInteger = match(rgb_rgba_integer_regex, 255);\n                if (withInteger) {\n                    return withInteger;\n                }\n                return match(rgb_rgba_percentage_regex, 100);\n\n                function match(regex, max_value) {\n                    var colorGroups = css.match(regex);\n\n                    // If there is an \"a\" after \"rgb\", there must be a fourth parameter and the other way round\n                    if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                        return null;\n                    }\n\n                    var rgb = factories.RGB();\n                    rgb.red = Math.min(1, Math.max(0, colorGroups[2] / max_value));\n                    rgb.green = Math.min(1, Math.max(0, colorGroups[3] / max_value));\n                    rgb.blue = Math.min(1, Math.max(0, colorGroups[4] / max_value));\n                    rgb.alpha = !!colorGroups[5] ? Math.min(Math.max(parseFloat(colorGroups[6]), 0), 1) : 1;\n\n                    return rgb;\n                }\n            },\n\n            function(css) {\n                var lower = css.toLowerCase();\n                if (lower in css_colors) {\n                    css = css_colors[lower];\n                }\n\n                if (!css.match(/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/)) {\n                    return;\n                }\n\n                css = css.replace(/^#/, '');\n\n                var bytes = css.length / 3;\n\n                var max = Math.pow(16, bytes) - 1;\n\n                var rgb = factories.RGB();\n                rgb.red = parseInt(css.slice(0, bytes), 16) / max;\n                rgb.green = parseInt(css.slice(bytes * 1, bytes * 2), 16) / max;\n                rgb.blue = parseInt(css.slice(bytes * 2), 16) / max;\n                rgb.alpha = 1;\n                return rgb;\n            },\n\n            function(css) {\n                if (css.toLowerCase() !== 'transparent') return;\n\n                return transparent;\n            }\n        ],\n\n        _fromCSS: function(css) {\n            var color = null;\n            for (var i = 0, j = this._stringParsers.length; i < j; i++) {\n                color = this._stringParsers[i](css);\n                if (color) return color;\n            }\n        },\n\n        _fromRGB: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = RGB.red;\n            newRGB.green = RGB.green;\n            newRGB.blue = RGB.blue;\n            newRGB.alpha = RGB.hasOwnProperty('alpha') ? RGB.alpha : 1;\n\n            return newRGB;\n        },\n\n        _fromRGBArray: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = Math.max(0, Math.min(1, RGB[0] / 255));\n            newRGB.green = Math.max(0, Math.min(1, RGB[1] / 255));\n            newRGB.blue = Math.max(0, Math.min(1, RGB[2] / 255));\n            newRGB.alpha = RGB[3] !== undefined ? Math.max(0, Math.min(1, RGB[3])) : 1;\n\n            return newRGB;\n        },\n\n        // convert to a CSS string. defaults to two bytes a value\n        toCSSHex: function(bytes) {\n            bytes = bytes || 2;\n\n            var max = Math.pow(16, bytes) - 1;\n            var css = [\n                \"#\",\n                pad(Math.round(this.red * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.green * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.blue * max).toString(16).toUpperCase(), bytes)\n            ];\n\n            return css.join('');\n        },\n\n        toCSS: function(bytes) {\n            if (this.alpha === 1) return this.toCSSHex(bytes);\n\n            var max = 255;\n\n            var components = [\n                'rgba(',\n                Math.max(0, Math.min(max, Math.round(this.red * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.green * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.blue * max))), ',',\n                Math.max(0, Math.min(1, this.alpha)),\n                ')'\n            ];\n\n            return components.join('');\n        },\n\n        toHSV: function() {\n            var hsv = factories.HSV();\n            var min, max, delta;\n\n            min = Math.min(this.red, this.green, this.blue);\n            max = Math.max(this.red, this.green, this.blue);\n            hsv.value = max; // v\n\n            delta = max - min;\n\n            if (delta == 0) { // white, grey, black\n                hsv.hue = hsv.saturation = 0;\n            } else { // chroma\n                hsv.saturation = delta / max;\n\n                if (this.red == max) {\n                    hsv.hue = (this.green - this.blue) / delta; // between yellow & magenta\n                } else if (this.green == max) {\n                    hsv.hue = 2 + (this.blue - this.red) / delta; // between cyan & yellow\n                } else {\n                    hsv.hue = 4 + (this.red - this.green) / delta; // between magenta & cyan\n                }\n\n                hsv.hue = ((hsv.hue * 60) + 360) % 360; // degrees\n            }\n\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toHSL: function() {\n            return this.toHSV().toHSL();\n        },\n\n        toRGB: function() {\n            return this.clone();\n        }\n    });\n\n    transparent = color.fromObject({\n        red: 0,\n        blue: 0,\n        green: 0,\n        alpha: 0\n    });\n\n\n    /* Like RGB above, this object describes what will become the HSV\n     * template object. This model handles hue, saturation and value.\n     * hue is the number of degrees around the color wheel, saturation\n     * describes how much color their is and value is the brightness.\n     */\n    registerModel('HSV', {\n        hue: 0,\n        saturation: 0,\n        value: 1,\n        alpha: 1,\n\n        shiftHue: cloneOnApply(function(degrees) {\n            var hue = (this.hue + degrees) % 360;\n            if (hue < 0) {\n                hue = (360 + hue) % 360;\n            }\n\n            this.hue = hue;\n        }),\n\n        devalueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value - val, 0));\n        }),\n\n        devalueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 - val), 0));\n        }),\n\n        valueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value + val, 0));\n        }),\n\n        valueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 + val), 0));\n        }),\n\n        desaturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation - val, 0));\n        }),\n\n        desaturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 - val), 0));\n        }),\n\n        saturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation + val, 0));\n        }),\n\n        saturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 + val), 0));\n        }),\n\n        schemeFromDegrees: function(degrees) {\n            var newColors = [];\n            for (var i = 0, j = degrees.length; i < j; i++) {\n                var col = this.clone();\n                col.hue = (this.hue + degrees[i]) % 360;\n                newColors.push(col);\n            }\n            return newColors;\n        },\n\n        complementaryScheme: function() {\n            return this.schemeFromDegrees([0, 180]);\n        },\n\n        splitComplementaryScheme: function() {\n            return this.schemeFromDegrees([0, 150, 320]);\n        },\n\n        splitComplementaryCWScheme: function() {\n            return this.schemeFromDegrees([0, 150, 300]);\n        },\n\n        splitComplementaryCCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 210]);\n        },\n\n        triadicScheme: function() {\n            return this.schemeFromDegrees([0, 120, 240]);\n        },\n\n        clashScheme: function() {\n            return this.schemeFromDegrees([0, 90, 270]);\n        },\n\n        tetradicScheme: function() {\n            return this.schemeFromDegrees([0, 90, 180, 270]);\n        },\n\n        fourToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 180, 240]);\n        },\n\n        fourToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 120, 180, 300]);\n        },\n\n        fiveToneAScheme: function() {\n            return this.schemeFromDegrees([0, 115, 155, 205, 245]);\n        },\n\n        fiveToneBScheme: function() {\n            return this.schemeFromDegrees([0, 40, 90, 130, 245]);\n        },\n\n        fiveToneCScheme: function() {\n            return this.schemeFromDegrees([0, 50, 90, 205, 320]);\n        },\n\n        fiveToneDScheme: function() {\n            return this.schemeFromDegrees([0, 40, 155, 270, 310]);\n        },\n\n        fiveToneEScheme: function() {\n            return this.schemeFromDegrees([0, 115, 230, 270, 320]);\n        },\n\n        sixToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 30, 120, 150, 240, 270]);\n        },\n\n        sixToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 90, 120, 210, 240, 330]);\n        },\n\n        neutralScheme: function() {\n            return this.schemeFromDegrees([0, 15, 30, 45, 60, 75]);\n        },\n\n        analogousScheme: function() {\n            return this.schemeFromDegrees([0, 30, 60, 90, 120, 150]);\n        },\n\n        fromObject: function(o) {\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('value')) {\n                var hsv = factories.HSV();\n\n                hsv.hue = o.hue;\n                hsv.saturation = o.saturation;\n                hsv.value = o.value;\n                hsv.alpha = o.hasOwnProperty('alpha') ? o.alpha : 1;\n\n                return hsv;\n            }\n            // nothing matches, not an HSV object\n            return null;\n        },\n\n        _normalise: function() {\n            this.hue %= 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.value = Math.min(Math.max(0, this.value));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toRGB: function() {\n            this._normalise();\n\n            var rgb = factories.RGB();\n            var i;\n            var f, p, q, t;\n\n            if (this.saturation === 0) {\n                // achromatic (grey)\n                rgb.red = this.value;\n                rgb.green = this.value;\n                rgb.blue = this.value;\n                rgb.alpha = this.alpha;\n                return rgb;\n            }\n\n            var h = this.hue / 60; // sector 0 to 5\n            i = Math.floor(h);\n            f = h - i; // factorial part of h\n            p = this.value * (1 - this.saturation);\n            q = this.value * (1 - this.saturation * f);\n            t = this.value * (1 - this.saturation * (1 - f));\n\n            switch (i) {\n                case 0:\n                    rgb.red = this.value;\n                    rgb.green = t;\n                    rgb.blue = p;\n                    break;\n                case 1:\n                    rgb.red = q;\n                    rgb.green = this.value;\n                    rgb.blue = p;\n                    break;\n                case 2:\n                    rgb.red = p;\n                    rgb.green = this.value;\n                    rgb.blue = t;\n                    break;\n                case 3:\n                    rgb.red = p;\n                    rgb.green = q;\n                    rgb.blue = this.value;\n                    break;\n                case 4:\n                    rgb.red = t;\n                    rgb.green = p;\n                    rgb.blue = this.value;\n                    break;\n                default: // case 5:\n                    rgb.red = this.value;\n                    rgb.green = p;\n                    rgb.blue = q;\n                    break;\n            }\n\n            rgb.alpha = this.alpha;\n\n            return rgb;\n        },\n        toHSL: function() {\n            this._normalise();\n\n            var hsl = factories.HSL();\n\n            hsl.hue = this.hue;\n            var l = (2 - this.saturation) * this.value,\n                s = this.saturation * this.value;\n            if (l && 2 - l) {\n                s /= (l <= 1) ? l : 2 - l;\n            }\n            l /= 2;\n            hsl.saturation = s;\n            hsl.lightness = l;\n            hsl.alpha = this.alpha;\n\n            return hsl;\n        },\n\n        toHSV: function() {\n            return this.clone();\n        }\n    });\n\n    registerModel('HSL', {\n        hue: 0,\n        saturation: 0,\n        lightness: 0,\n        alpha: 1,\n\n        darkenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness - val, 0));\n        }),\n\n        darkenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 - val), 0));\n        }),\n\n        lightenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness + val, 0));\n        }),\n\n        lightenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 + val), 0));\n        }),\n\n        fromObject: function(o) {\n            if (\"string\" == typeof o) {\n                return this._fromCSS(o);\n            }\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('lightness')) {\n                return this._fromHSL(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _fromCSS: function(css) {\n            var colorGroups = trim(css).match(hsl_hsla_regex);\n\n            // if there is an \"a\" after \"hsl\", there must be a fourth parameter and the other way round\n            if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                return null;\n            }\n\n            var hsl = factories.HSL();\n            hsl.hue = (colorGroups[2] % 360 + 360) % 360;\n            hsl.saturation = Math.max(0, Math.min(parseInt(colorGroups[3], 10) / 100, 1));\n            hsl.lightness = Math.max(0, Math.min(parseInt(colorGroups[4], 10) / 100, 1));\n            hsl.alpha = !!colorGroups[5] ? Math.max(0, Math.min(1, parseFloat(colorGroups[6]))) : 1;\n\n            return hsl;\n        },\n\n        _fromHSL: function(HSL) {\n            var newHSL = factories.HSL();\n\n            newHSL.hue = HSL.hue;\n            newHSL.saturation = HSL.saturation;\n            newHSL.lightness = HSL.lightness;\n\n            newHSL.alpha = HSL.hasOwnProperty('alpha') ? HSL.alpha : 1;\n\n            return newHSL;\n        },\n\n        _normalise: function() {\n            this.hue = (this.hue % 360 + 360) % 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.lightness = Math.min(Math.max(0, this.lightness));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toHSL: function() {\n            return this.clone();\n        },\n        toHSV: function() {\n            this._normalise();\n\n            var hsv = factories.HSV();\n\n            // http://ariya.blogspot.com/2008/07/converting-between-hsl-and-hsv.html\n            hsv.hue = this.hue; // H\n            var l = 2 * this.lightness,\n                s = this.saturation * ((l <= 1) ? l : 2 - l);\n            hsv.value = (l + s) / 2; // V\n            hsv.saturation = ((2 * s) / (l + s)) || 0; // S\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toRGB: function() {\n            return this.toHSV().toRGB();\n        }\n    });\n\n    // Package specific exports\n\n    /* the Color function is a factory for new color objects.\n     */\n    function Color(o) {\n        return color.fromObject(o);\n    }\n    Color.isValid = function(str) {\n        var key, c = Color(str);\n\n        var length = 0;\n        for (key in c) {\n            if (c.hasOwnProperty(key)) {\n                length++;\n            }\n        }\n\n        return length > 0;\n    };\n    net.brehaut.Color = Color;\n}).call(net.brehaut);\n\n/* Export to CommonJS\n */\nif (typeof module !== 'undefined') {\n    module.exports = net.brehaut.Color;\n}","import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import { author, name, version, description } from \"../index\";\r\nimport { BaseObject } from \"../sdk\";\r\n\r\nexport default class BaseAnalyserObject<D = {}, S = {}, I extends any[] = any[], O extends any[] = any[], A extends any[] = any[], P = {}, U = {}> extends BaseObject<D, S, I, O, A, P, U> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import { author, name, version, description } from \"../index\";\r\nimport { DefaultObject } from \"../sdk\";\r\n\r\nexport default class DefaultAnalyserObject<D = {}, S = {}, I extends any[] = any[], O extends any[] = any[], A extends any[] = any[], P = {}, U = {}> extends DefaultObject<D, S, I, O, A, P, U> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import BaseAnalyserObject from \"./base\";\r\nimport OscilloscopeUI from \"../ui/oscilloscope\";\r\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\r\nimport type { OscilloscopeUIState } from \"../ui/oscilloscope\";\r\nimport type { TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\r\nimport type { IInletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface IS {\r\n    node: SpectralAnalyserNode;\r\n}\r\nexport interface P extends Omit<OscilloscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\r\n    windowSize: number;\r\n    fftSize: number;\r\n    fftOverlap: number;\r\n    windowFunction: TWindowFunction;\r\n}\r\nexport default class Oscilloscope extends BaseAnalyserObject<{}, {}, [Bang], [], [], P, OscilloscopeUIState> {\r\n    static description = \"Oscilloscope\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Signal\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        windowSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"Signal window size\"\r\n        },\r\n        fftSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"FFT Size for analysis\"\r\n        },\r\n        fftOverlap: {\r\n            type: \"number\",\r\n            default: 2,\r\n            description: \"FFT overlap count (integer)\"\r\n        },\r\n        windowFunction: {\r\n            type: \"enum\",\r\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\r\n            default: \"blackman\",\r\n            description: \"Window Function aoolied for FFT analysis window\"\r\n        },\r\n        continuous: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Continuous drawing\",\r\n            isUIState: true\r\n        },\r\n        frameRate: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"UI refresh rate\",\r\n            isUIState: true\r\n        },\r\n        interleaved: {\r\n            type: \"boolean\",\r\n            default: false,\r\n            description: \"Draw channels seperately\",\r\n            isUIState: true\r\n        },\r\n        stablize: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Stablize\",\r\n            isUIState: true\r\n        },\r\n        range: {\r\n            type: \"number\",\r\n            default: 1,\r\n            description: \"Vertical range\",\r\n            isUIState: true\r\n        },\r\n        autoRange: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Auto adjust range if > 1\",\r\n            isUIState: true\r\n        },\r\n        showStats: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Show stats texts\",\r\n            isUIState: true\r\n        },\r\n        bgColor: {\r\n            type: \"color\",\r\n            default: \"rgb(40, 40, 40)\",\r\n            description: \"Background color\",\r\n            isUIState: true\r\n        },\r\n        phosphorColor: {\r\n            type: \"color\",\r\n            default: \"hsl(0, 100%, 85%)\",\r\n            description: \"Phosphor color\",\r\n            isUIState: true\r\n        },\r\n        hueOffset: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"Channel Color Hue offset\",\r\n            isUIState: true\r\n        },\r\n        textColor: {\r\n            type: \"color\",\r\n            default: \"#DDDD99\",\r\n            description: \"Info text color\",\r\n            isUIState: true\r\n        },\r\n        gridColor: {\r\n            type: \"color\",\r\n            default: \"#404040\",\r\n            description: \"Grid color\",\r\n            isUIState: true\r\n        },\r\n        seperatorColor: {\r\n            type: \"color\",\r\n            default: \"white\",\r\n            description: \"Channel seperator color\",\r\n            isUIState: true\r\n        }\r\n    };\r\n    static UI = OscilloscopeUI;\r\n    _: IS = { node: undefined };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 0;\r\n        });\r\n        this.on(\"updateProps\", (props) => {\r\n            if (this._.node) {\r\n                const { parameters } = this._.node;\r\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\r\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\r\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\r\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\r\n            }\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\r\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\r\n            const { parameters } = this._.node;\r\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\r\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\r\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\r\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\r\n            this.disconnectAudioInlet();\r\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\r\n            this.connectAudioInlet();\r\n        });\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.updateUI({ paint: {} });\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.node) this._.node.destroy();\r\n        });\r\n    }\r\n}\r\n","import DefaultAnalyserObject from \"./default\";\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\nimport type { SpectralAnalysis, TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport interface P extends Record<keyof SpectralAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n    continuous: boolean;\n}\nexport interface IS {\n    node: SpectralAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<SpectralAnalysis>;\nexport default class SpectralAnalyser extends DefaultAnalyserObject<{}, {}, [Bang], [Outlet0], [], P> {\n    static description = \"Spectral feature extractor\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: IPropsMeta<P> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        lastAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the last amplitudes frame\"\n        },\n        allAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting all the amplitudes frame\"\n        },\n        amplitude: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the sum of the last amplitude frame\"\n        },\n        estimatedFreq: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the estimated frequency\"\n        },\n        centroid: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral centroid\"\n        },\n        flatness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flatness\"\n        },\n        flux: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flux\"\n        },\n        kurtosis: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral kurtosis\"\n        },\n        skewness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral skewness\"\n        },\n        rolloff: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral rolloff\"\n        },\n        slope: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral slope\"\n        },\n        spread: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral spread\"\n        }\n    };\n    _: IS = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this._.node && !this._.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"lastAmplitudes\",\n                        \"allAmplitudes\",\n                        \"amplitude\",\n                        \"estimatedFreq\",\n                        \"centroid\",\n                        \"flatness\",\n                        \"flux\",\n                        \"kurtosis\",\n                        \"skewness\",\n                        \"rolloff\",\n                        \"slope\",\n                        \"spread\"\n                    ] as (keyof SpectralAnalysis)[];\n                    const gets: (keyof SpectralAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this._.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this._.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this._.node) {\n                const { parameters } = this._.node;\n                if (props.continuous) startRequest();\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this._.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this._.$requestTimer);\n            if (this._.node) this._.node.destroy();\n        });\n    }\n}\n","import BaseAnalyserObject from \"./base\";\r\nimport SpectrogramUI from \"../ui/spectrogram\";\r\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\r\nimport type { SpectrogramUIState } from \"../ui/spectrogram\";\r\nimport type { TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\r\nimport type { IInletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface IS {\r\n    node: SpectralAnalyserNode;\r\n}\r\nexport interface P extends Omit<SpectrogramUIState, \"cursorX\" | \"cursorY\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\r\n    windowSize: number;\r\n    fftSize: number;\r\n    fftOverlap: number;\r\n    windowFunction: TWindowFunction;\r\n}\r\nexport default class Spectrogram extends BaseAnalyserObject<{}, {}, [Bang], [], [], P, SpectrogramUIState> {\r\n    static description = \"Spectroscope\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Signal\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        windowSize: {\r\n            type: \"number\",\r\n            default: 65536,\r\n            description: \"Signal window size\"\r\n        },\r\n        fftSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"FFT Size for analysis\"\r\n        },\r\n        fftOverlap: {\r\n            type: \"number\",\r\n            default: 2,\r\n            description: \"FFT overlap count (integer)\"\r\n        },\r\n        windowFunction: {\r\n            type: \"enum\",\r\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\r\n            default: \"blackman\",\r\n            description: \"Window Function aoolied for FFT analysis window\"\r\n        },\r\n        continuous: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Continuous drawing\",\r\n            isUIState: true\r\n        },\r\n        frameRate: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"UI refresh rate\",\r\n            isUIState: true\r\n        },\r\n        bgColor: {\r\n            type: \"color\",\r\n            default: \"rgb(40, 40, 40)\",\r\n            description: \"Background color\",\r\n            isUIState: true\r\n        },\r\n        gridColor: {\r\n            type: \"color\",\r\n            default: \"#404040\",\r\n            description: \"Grid color\",\r\n            isUIState: true\r\n        },\r\n        seperatorColor: {\r\n            type: \"color\",\r\n            default: \"white\",\r\n            description: \"Channel seperator color\",\r\n            isUIState: true\r\n        }\r\n    };\r\n    static UI = SpectrogramUI;\r\n    _: IS = { node: undefined };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 0;\r\n        });\r\n        this.on(\"updateProps\", (props) => {\r\n            if (this._.node) {\r\n                const { parameters } = this._.node;\r\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\r\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\r\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\r\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\r\n            }\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\r\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\r\n            const { parameters } = this._.node;\r\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\r\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\r\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\r\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\r\n            this.disconnectAudioInlet();\r\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\r\n            this.connectAudioInlet();\r\n        });\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.updateUI({ paint: {} });\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.node) this._.node.destroy();\r\n        });\r\n    }\r\n}\r\n","import BaseAnalyserObject from \"./base\";\r\nimport SpectroscopeUI from \"../ui/spectroscope\";\r\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\r\nimport type { SpectroscopeUIState } from \"../ui/spectroscope\";\r\nimport type { TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\r\nimport type { IInletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface IS {\r\n    node: SpectralAnalyserNode;\r\n}\r\nexport interface Props extends Omit<SpectroscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\r\n    windowSize: number;\r\n    fftSize: number;\r\n    fftOverlap: number;\r\n    windowFunction: TWindowFunction;\r\n}\r\nexport default class Spectroscope extends BaseAnalyserObject<{}, {}, [Bang], [], [], Props, SpectroscopeUIState> {\r\n    static description = \"Spectroscope\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Signal\"\r\n    }];\r\n    static props: IPropsMeta<Props> = {\r\n        windowSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"Signal window size\"\r\n        },\r\n        fftSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"FFT Size for analysis\"\r\n        },\r\n        fftOverlap: {\r\n            type: \"number\",\r\n            default: 2,\r\n            description: \"FFT overlap count (integer)\"\r\n        },\r\n        windowFunction: {\r\n            type: \"enum\",\r\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\r\n            default: \"blackman\",\r\n            description: \"Window Function aoolied for FFT analysis window\"\r\n        },\r\n        continuous: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Continuous drawing\",\r\n            isUIState: true\r\n        },\r\n        frameRate: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"UI refresh rate\",\r\n            isUIState: true\r\n        },\r\n        bgColor: {\r\n            type: \"color\",\r\n            default: \"rgb(40, 40, 40)\",\r\n            description: \"Background color\",\r\n            isUIState: true\r\n        },\r\n        fgColor: {\r\n            type: \"color\",\r\n            default: \"hsl(0, 100%, 85%)\",\r\n            description: \"Foreground color\",\r\n            isUIState: true\r\n        },\r\n        hueOffset: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"Channel Color Hue offset\",\r\n            isUIState: true\r\n        },\r\n        gridColor: {\r\n            type: \"color\",\r\n            default: \"#404040\",\r\n            description: \"Grid color\",\r\n            isUIState: true\r\n        },\r\n        seperatorColor: {\r\n            type: \"color\",\r\n            default: \"white\",\r\n            description: \"Channel seperator color\",\r\n            isUIState: true\r\n        }\r\n    };\r\n    static UI = SpectroscopeUI;\r\n    _: IS = { node: undefined };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 0;\r\n        });\r\n        this.on(\"updateProps\", (props) => {\r\n            if (this._.node) {\r\n                const { parameters } = this._.node;\r\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\r\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\r\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\r\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\r\n            }\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\r\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\r\n            const { parameters } = this._.node;\r\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\r\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\r\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\r\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\r\n            this.disconnectAudioInlet();\r\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\r\n            this.connectAudioInlet();\r\n        });\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.updateUI({ paint: {} });\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.node) this._.node.destroy();\r\n        });\r\n    }\r\n}\r\n","import DefaultAnalyserObject from \"./default\";\nimport { TemporalAnalyserNode, Bang, isBang } from \"../sdk\";\nimport type { TemporalAnalysis } from \"@jspatcher/jspatcher/src/core/worklets/TemporalAnalyserWorklet.types\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport interface P extends Record<keyof TemporalAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    continuous: boolean;\n}\nexport interface IS {\n    node: TemporalAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<TemporalAnalysis>;\nexport default class TemporalAnalyser extends DefaultAnalyserObject<{}, IS, [Bang], [Outlet0], [], P> {\n    static description = \"Temporal feature extractor\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: IPropsMeta<P> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        absMax: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the absolute Maximum\"\n        },\n        rms: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the Root Mean Square\"\n        },\n        zcr: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the zero crossing count\"\n        }\n    };\n    _: IS = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this._.node && !this._.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"rms\",\n                        \"zcr\",\n                        \"absMax\"\n                    ] as (keyof TemporalAnalysis)[];\n                    const gets: (keyof TemporalAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this._.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this._.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this._.node) {\n                const { parameters } = this._.node;\n                if (props.continuous) startRequest();\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await TemporalAnalyserNode.register(this.audioCtx.audioWorklet);\n            this._.node = new TemporalAnalyserNode(this.audioCtx);\n            const { parameters } = this._.node;\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this._.$requestTimer);\n            if (this._.node) this._.node.destroy();\n        });\n    }\n}\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    PatcherAudio,\r\n    OperableAudioBuffer,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    DefaultObject,\r\n    BaseUI,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    DefaultPopupUI,\r\n    CodePopupUI,\r\n    DOMUI,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    generateRemotedObject,\r\n    Bang,\r\n    isBang,\r\n    TransmitterNode,\r\n    TemporalAnalyserNode,\r\n    SpectralAnalyserNode,\r\n    MathUtils,\r\n    BufferUtils,\r\n    Utils\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface OperableAudioBuffer extends InstanceType<typeof OperableAudioBuffer> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface TransmitterNode extends InstanceType<typeof TransmitterNode> {}\r\nexport interface TemporalAnalyserNode extends InstanceType<typeof TemporalAnalyserNode> {}\r\nexport interface SpectralAnalyserNode extends InstanceType<typeof SpectralAnalyserNode> {}\r\n","import * as Color from \"color-js\";\r\nimport { CanvasUI } from \"../sdk\";\r\nimport type Oscilloscope from \"../objects/oscilloscope\";\r\n\r\nexport interface OscilloscopeUIState {\r\n    continuous: boolean;\r\n    frameRate: number;\r\n    interleaved: boolean;\r\n    stablize: boolean;\r\n    $cursor: number;\r\n    zoom: number;\r\n    zoomOffset: number;\r\n    range: number;\r\n    autoRange: boolean;\r\n    showStats: boolean;\r\n    bgColor: string;\r\n    phosphorColor: string;\r\n    hueOffset: number;\r\n    textColor: string;\r\n    gridColor: string;\r\n    seperatorColor: string;\r\n    paint: {};\r\n}\r\nexport default class OscilloscopeUI extends CanvasUI<Oscilloscope, {}, OscilloscopeUIState> {\r\n    static defaultSize = [120, 60] as [number, number];\r\n    componentDidMount() {\r\n        const { bgColor } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const [width, height] = this.fullSize();\r\n        // Background\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n        super.componentDidMount();\r\n    }\r\n    async paint() {\r\n        if (this.state.continuous) this.schedulePaint();\r\n        if (!this.object._.node) return;\r\n        if (this.object._.node.destroyed) return;\r\n        const {\r\n            // width,\r\n            // height,\r\n            // zoom,\r\n            // zoomOffset,\r\n            stablize,\r\n            interleaved,\r\n            // $cursor,\r\n            range,\r\n            autoRange,\r\n            showStats,\r\n            bgColor,\r\n            phosphorColor,\r\n            hueOffset,\r\n            textColor,\r\n            gridColor,\r\n            seperatorColor\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n\r\n        const left = 0;\r\n        const bottom = 0;\r\n\r\n        const { estimatedFreq, buffer } = await this.object._.node.gets(\"estimatedFreq\", \"buffer\");\r\n        const l = this.object.getProp(\"windowSize\");\r\n        const { sampleRate } = this.object.audioCtx;\r\n\r\n        // Background\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        if (!buffer) return;\r\n\r\n        const { $read: $ui32, data: t } = buffer;\r\n        if (!t || !t.length || !t[0].length) return;\r\n\r\n        const $ = Atomics.load($ui32, 0);\r\n        const channels = t.length;\r\n        const dl = t[0].length;\r\n        // Vertical Range\r\n        let yMin = -range;\r\n        let yMax = range;\r\n        let yFactor = range;\r\n        if (autoRange) {\r\n            // Fastest way to get min and max to have: 1. max abs value for y scaling, 2. mean value for zero-crossing\r\n            let i = channels;\r\n            let s: number;\r\n            while (i--) {\r\n                let j = l;\r\n                while (j--) {\r\n                    s = t[i][($ + j) % dl];\r\n                    if (s < yMin) yMin = s;\r\n                    else if (s > yMax) yMax = s;\r\n                }\r\n            }\r\n            yFactor = Math.max(1, Math.abs(yMin), Math.abs(yMax))/* * vzoom*/;\r\n        }\r\n        const calcY = (v: number, i: number) => channelHeight * (+interleaved * i + 1 - (v - yMin) / (yMax - yMin));\r\n        // Grids\r\n        ctx.strokeStyle = gridColor;\r\n        let vStep = 0.25;\r\n        while (yFactor / 2 / vStep > 2) vStep *= 2; // Minimum horizontal grids in channel one side = 2\r\n        ctx.beginPath();\r\n        ctx.setLineDash([]);\r\n        const gridChannels = interleaved ? channels : 1;\r\n        const channelHeight = (height - bottom) / gridChannels;\r\n        for (let i = 0; i < gridChannels; i++) {\r\n            let y = calcY(0, i);\r\n            ctx.moveTo(left, y);\r\n            ctx.lineTo(width, y); // 0-line\r\n            for (let j = vStep; j < yFactor; j += vStep) {\r\n                y = calcY(j, i);\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y); // below 0\r\n                y = calcY(-j, i);\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y); // above 0\r\n            }\r\n        }\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.setLineDash([4, 2]);\r\n        ctx.strokeStyle = seperatorColor;\r\n        for (let i = 1; i < gridChannels; i++) {\r\n            ctx.moveTo(left, i * channelHeight);\r\n            ctx.lineTo(width, i * channelHeight);\r\n        }\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n        ctx.lineWidth = 2;\r\n        const channelColor: string[] = [];\r\n        let $zerox = 0; // First Zero-crossing of first channel\r\n        const period = sampleRate / estimatedFreq[0];\r\n        const times = Math.floor(l / period) - 1;\r\n        for (let i = 0; i < channels; i++) {\r\n            // Horizontal Range\r\n            let $0 = 0; // Draw start\r\n            let $1 = l; // Draw End\r\n            let drawL = l; // Length to draw\r\n            if (stablize) { // Stablization\r\n                if (i === 0) {\r\n                    const thresh = (yMin + yMax) * 0.5 + 0.001; // the zero-crossing with \"offset\"\r\n                    while ($zerox < l && t[i][($ + $zerox++) % dl] > thresh); // Find first raise\r\n                    if ($zerox >= l - 1) { // Found nothing, no stablization\r\n                        $zerox = 0;\r\n                    } else {\r\n                        while ($zerox < l && t[i][($ + $zerox++) % dl] < thresh); // Find first drop\r\n                        $zerox--;\r\n                        if ($zerox >= l - 1 || $zerox < 0) {\r\n                            $zerox = 0;\r\n                        }\r\n                    }\r\n                }\r\n                drawL = times > 0 && isFinite(period) ? ~~Math.min(period * times, l - $zerox) : l - $zerox; // length to draw\r\n            }\r\n            $0 = Math.round($zerox/* + drawL * zoomOffset*/);\r\n            $1 = Math.round($zerox + drawL/* / zoom + drawL * zoomOffset*/);\r\n            const pixelsPerSamp = (width - left) / ($1 - 1 - $0);\r\n            const sampsPerPixel = Math.max(1, Math.round(1 / pixelsPerSamp));\r\n\r\n            if (interleaved) {\r\n                ctx.save();\r\n                const clip = new Path2D();\r\n                clip.rect(0, i * channelHeight, width, channelHeight);\r\n                ctx.clip(clip);\r\n            }\r\n            ctx.beginPath();\r\n            channelColor[i] = Color(phosphorColor).shiftHue(i * hueOffset).toHSL();\r\n            ctx.strokeStyle = channelColor[i];\r\n            let maxInStep: number;\r\n            let minInStep: number;\r\n            let $j: number;\r\n            let samp: number;\r\n            let $step: number;\r\n            let x: number;\r\n            let y: number;\r\n            for (let j = $0; j < $1; j++) {\r\n                $j = (j + $) % dl;\r\n                samp = t[i][$j];\r\n                $step = (j - $0) % sampsPerPixel;\r\n                if ($step === 0) {\r\n                    maxInStep = samp;\r\n                    minInStep = samp;\r\n                } else {\r\n                    if (samp > maxInStep) maxInStep = samp;\r\n                    if (samp < minInStep) minInStep = samp;\r\n                }\r\n                if ($step !== sampsPerPixel - 1) continue;\r\n                x = (j - $step - $0) * pixelsPerSamp;\r\n                y = calcY(maxInStep, i);\r\n                if (j === $0) ctx.moveTo(x, y);\r\n                else ctx.lineTo(x, y);\r\n                if (minInStep !== maxInStep) {\r\n                    y = calcY(minInStep, i);\r\n                    ctx.lineTo(x, y);\r\n                }\r\n            }\r\n            ctx.stroke();\r\n            if (interleaved) ctx.restore();\r\n        }\r\n        // Stats\r\n        if (showStats) {\r\n            ctx.font = \"bold 12px Consolas, monospace\";\r\n            ctx.fillStyle = textColor;\r\n            ctx.textAlign = \"left\";\r\n            ctx.textBaseline = \"top\";\r\n            ctx.fillText(yFactor.toFixed(2), 2, 2);\r\n            ctx.textBaseline = \"bottom\";\r\n            ctx.fillText((-yFactor).toFixed(2), 2, height - 2);\r\n            ctx.textAlign = \"right\";\r\n            const freqStatY = height - 2 - (estimatedFreq.length - 1) * 14;\r\n            for (let i = 0; i < estimatedFreq.length; i++) {\r\n                const freq = estimatedFreq[i];\r\n                ctx.fillStyle = channelColor[i];\r\n                const y = interleaved ? channelHeight * (i + 1) - 2 : freqStatY + 14 * i;\r\n                ctx.fillText(freq.toFixed(2) + \"Hz\", width - 2, y);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { CanvasUI, MathUtils } from \"../sdk\";\r\nimport Spectrogram from \"../objects/spectrogram\";\r\n\r\nexport interface SpectrogramUIState {\r\n    continuous: boolean;\r\n    frameRate: number;\r\n    cursorX: number;\r\n    cursorY: number;\r\n    zoom: number;\r\n    zoomOffset: number;\r\n    bgColor: string;\r\n    // textColor: string;\r\n    gridColor: string;\r\n    seperatorColor: string;\r\n    paint: {};\r\n}\r\nexport default class SpectrogramUI extends CanvasUI<Spectrogram, {}, SpectrogramUIState> {\r\n    static defaultSize = [120, 60] as [number, number];\r\n    $lastFrame = -1;\r\n    dataFrames = 1;\r\n    offscreenCtx = document.createElement(\"canvas\").getContext(\"2d\");\r\n    offscreenVRes = 1024;\r\n    componentDidMount() {\r\n        const { bgColor } = this.state;\r\n        const { ctx, offscreenCtx, dataFrames } = this;\r\n        if (!ctx) return;\r\n        const [width, height] = this.fullSize();\r\n        offscreenCtx.canvas.width = dataFrames;\r\n        offscreenCtx.canvas.height = this.offscreenVRes;\r\n        // Background\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n        super.componentDidMount();\r\n    }\r\n    async paint() {\r\n        if (this.state.continuous) this.schedulePaint();\r\n        if (!this.object._.node) return;\r\n        if (this.object._.node.destroyed) return;\r\n        const {\r\n            // width,\r\n            // height,\r\n            // zoom,\r\n            // zoomOffset,\r\n            // $cursor,\r\n            bgColor,\r\n            gridColor,\r\n            seperatorColor\r\n        } = this.state;\r\n        const { ctx, offscreenCtx, offscreenVRes } = this;\r\n        if (!ctx || !offscreenCtx) return;\r\n\r\n        const left = 0;\r\n        const bottom = 0;\r\n\r\n        const allAmplitudes = await this.object._.node.getAllAmplitudes();\r\n\r\n        // Background\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        if (!allAmplitudes) return;\r\n        const { data: f, $totalFrames, fftBins: bins, frames, dataFrames, $writeFrame: $writeFrameUi32 } = allAmplitudes;\r\n        if (!f || !f.length || !f[0].length) return;\r\n        const l = f[0].length;\r\n        const channels = f.length;\r\n\r\n        // Draw to offscreen canvas\r\n        const $lastFrame = Atomics.load($totalFrames, 0) - 1;\r\n        const $writeFrame = Atomics.load($writeFrameUi32, 0);\r\n        let $frame0 = $writeFrame;\r\n        let $frame1 = $frame0 + dataFrames;\r\n        if (this.dataFrames !== dataFrames) {\r\n            offscreenCtx.canvas.width = dataFrames;\r\n            this.dataFrames = dataFrames;\r\n        } else if ($lastFrame >= this.$lastFrame) {\r\n            $frame0 = Math.max($frame0, $frame1 - ($lastFrame - this.$lastFrame));\r\n        }\r\n        this.$lastFrame = $lastFrame;\r\n        const osChannelHeight = offscreenVRes / channels;\r\n        const step = Math.max(1, Math.round(bins / osChannelHeight));\r\n        const vGrid = osChannelHeight / bins;\r\n        for (let i = 0; i < f.length; i++) {\r\n            for (let j = $frame0; j < $frame1; j++) {\r\n                let maxInStep;\r\n                offscreenCtx.fillStyle = \"black\";\r\n                offscreenCtx.fillRect(j % dataFrames, i * osChannelHeight, 1, osChannelHeight);\r\n                for (let k = 0; k < bins; k++) {\r\n                    const samp = MathUtils.atodb(f[i][(k + j * bins) % l]);\r\n                    const $step = k % step;\r\n                    if ($step === 0) maxInStep = samp;\r\n                    if ($step !== step - 1) {\r\n                        if ($step !== 0 && samp > maxInStep) maxInStep = samp;\r\n                        continue;\r\n                    }\r\n                    const normalized = Math.min(1, Math.max(0, (maxInStep + 10) / 100 + 1));\r\n                    if (normalized === 0) continue;\r\n                    const hue = (normalized * 180 + 240) % 360;\r\n                    const lum = normalized * 50;\r\n                    offscreenCtx.fillStyle = `hsl(${hue}, 100%, ${lum}%)`;\r\n                    offscreenCtx.fillRect(j % dataFrames, (bins - k - 1) * vGrid + i * osChannelHeight, 1, Math.max(1, vGrid));\r\n                }\r\n            }\r\n        }\r\n        // Grids\r\n        ctx.strokeStyle = gridColor;\r\n        const vStep = 0.25;\r\n        const hStep = 0.25;\r\n        ctx.beginPath();\r\n        ctx.setLineDash([]);\r\n        const gridChannels = channels;\r\n        const channelHeight = (height - bottom) / gridChannels;\r\n        for (let i = 0; i < gridChannels; i++) {\r\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\r\n                const y = (i + j) * channelHeight;\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y);\r\n            }\r\n        }\r\n        for (let i = hStep; i < 1; i += hStep) {\r\n            const x = left + (width - left) * i;\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, bottom);\r\n        }\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.setLineDash([4, 2]);\r\n        ctx.strokeStyle = seperatorColor;\r\n        for (let i = 1; i < gridChannels; i++) {\r\n            ctx.moveTo(left, i * channelHeight);\r\n            ctx.lineTo(width, i * channelHeight);\r\n        }\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n        // Horizontal Range\r\n        ctx.save();\r\n        ctx.globalCompositeOperation = \"lighter\";\r\n        ctx.imageSmoothingEnabled = false;\r\n        $frame0 = ($frame1 - frames) % dataFrames;\r\n        $frame1 = $frame0 + frames;\r\n        if ($frame1 <= dataFrames) {\r\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, frames, offscreenVRes, left, 0, width - left, height - bottom);\r\n        } else {\r\n            const sSplit = dataFrames - $frame0;\r\n            const dSplit = sSplit / frames * (width - left);\r\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, sSplit, offscreenVRes, left, 0, dSplit, height - bottom);\r\n            ctx.drawImage(offscreenCtx.canvas, 0, 0, $frame1 - dataFrames - 0.01, offscreenVRes, dSplit + left, 0, width - left - dSplit, height - bottom);\r\n        }\r\n        ctx.restore();\r\n    }\r\n}","import * as Color from \"color-js\";\r\nimport Spectroscope from \"../objects/spectroscope\";\r\nimport { CanvasUI, MathUtils } from \"../sdk\";\r\n\r\nexport interface SpectroscopeUIState {\r\n    continuous: boolean;\r\n    frameRate: number;\r\n    $cursor: number;\r\n    zoom: number;\r\n    zoomOffset: number;\r\n    bgColor: string;\r\n    fgColor: string;\r\n    hueOffset: number;\r\n    gridColor: string;\r\n    seperatorColor: string;\r\n    paint: {};\r\n}\r\nexport default class SpectroscopeUI extends CanvasUI<Spectroscope, {}, SpectroscopeUIState> {\r\n    static defaultSize = [120, 60] as [number, number];\r\n    componentDidMount() {\r\n        const { bgColor } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const [width, height] = this.fullSize();\r\n        // Background\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n        super.componentDidMount();\r\n    }\r\n    async paint() {\r\n        if (this.state.continuous) this.schedulePaint();\r\n        if (!this.object._.node) return;\r\n        if (this.object._.node.destroyed) return;\r\n        const {\r\n            // width,\r\n            // height,\r\n            // zoom,\r\n            // zoomOffset,\r\n            // $cursor,\r\n            bgColor,\r\n            fgColor,\r\n            hueOffset,\r\n            gridColor,\r\n            seperatorColor\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n\r\n        const left = 0;\r\n        const bottom = 0;\r\n\r\n        const lastAmplitudes = await this.object._.node.getLastAmplitudes();\r\n\r\n        // Background\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        if (!lastAmplitudes) return;\r\n        const { data: f } = lastAmplitudes;\r\n        if (!f || !f.length || !f[0].length) return;\r\n        const l = f[0].length;\r\n        const channels = f.length;\r\n\r\n        // Grids\r\n        ctx.strokeStyle = gridColor;\r\n        const vStep = 0.25;\r\n        const hStep = 0.25;\r\n        ctx.beginPath();\r\n        ctx.setLineDash([]);\r\n        const gridChannels = channels;\r\n        const channelHeight = (height - bottom) / gridChannels;\r\n        for (let i = 0; i < gridChannels; i++) {\r\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\r\n                const y = (i + j) * channelHeight;\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y);\r\n            }\r\n        }\r\n        for (let i = hStep; i < 1; i += hStep) {\r\n            const x = left + (width - left) * i;\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, bottom);\r\n        }\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.setLineDash([4, 2]);\r\n        ctx.strokeStyle = seperatorColor;\r\n        for (let i = 1; i < gridChannels; i++) {\r\n            ctx.moveTo(left, i * channelHeight);\r\n            ctx.lineTo(width, i * channelHeight);\r\n        }\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n        ctx.lineWidth = 2;\r\n        const channelColor: string[] = [];\r\n        // Horizontal Range\r\n        const $0 = 0; // Draw start\r\n        const $1 = l; // Draw End\r\n        const gridX = (width - left) / ($1 - $0);\r\n        const step = Math.max(1, Math.round(1 / gridX));\r\n        for (let i = 0; i < f.length; i++) {\r\n            ctx.beginPath();\r\n            channelColor[i] = Color(fgColor).shiftHue(i * hueOffset).toHSL();\r\n            ctx.fillStyle = channelColor[i];\r\n            let maxInStep;\r\n            for (let j = $0; j < $1; j++) {\r\n                const samp = MathUtils.atodb(f[i][j]);\r\n                const $step = (j - $0) % step;\r\n                if ($step === 0) maxInStep = samp;\r\n                if ($step !== step - 1) {\r\n                    if ($step !== 0 && samp > maxInStep) maxInStep = samp;\r\n                    continue;\r\n                }\r\n                const x = (j - $0) * gridX + left;\r\n                const y = channelHeight * (i + 1 - Math.min(1, Math.max(0, maxInStep / 100 + 1)));\r\n                if (j === $0) ctx.moveTo(x, y);\r\n                else ctx.lineTo(x, y);\r\n            }\r\n            ctx.lineTo(width, channelHeight * (i + 1));\r\n            ctx.lineTo(left, channelHeight * (i + 1));\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Oscilloscope from \"./objects/oscilloscope\";\nimport SpectralAnalyser from \"./objects/spectral-analyser\";\nimport Spectrogram from \"./objects/spectrogram\";\nimport Spectroscope from \"./objects/spectroscope\";\nimport TemporalAnalyser from \"./objects/temporal-analyser\";\n\nexport default async () => {\n    return {\n        \"temporalAnalyser~\": TemporalAnalyser,\n        \"spectralAnalyser~\": SpectralAnalyser,\n        \"scope~\": Oscilloscope,\n        \"spectroscope~\": Spectroscope,\n        \"spectrogram~\": Spectrogram\n    }\n};"],"names":[],"sourceRoot":""}